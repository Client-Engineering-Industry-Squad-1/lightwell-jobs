-- -----------------------------------------------------
-- Framework Database Installation Script
-- Portal Version: v2.12.0+
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `LW_ALERT_RULES`
-- -----------------------------------------------------
CREATE TABLE LW_ALERT_RULES (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [SOURCE_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(255) NULL DEFAULT NULL,
  [STATUS_REASON] NVARCHAR(255) NULL DEFAULT NULL,
  [ADDRESS] NVARCHAR(1024) NOT NULL,
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_ALERT_RULES ([CLIENT_ID] ASC);


-- -----------------------------------------------------
-- Table `LW_ARCHIVE_HISTORY`
-- -----------------------------------------------------
CREATE TABLE LW_ARCHIVE_HISTORY (
  [CLIENT_ID] INT NOT NULL,
  [WFID] BIGINT NOT NULL,
  [FROM_DATE] CHAR(10) NOT NULL,
  [ID] BIGINT NOT NULL,
  [PARENT_WFID] BIGINT NOT NULL,
  [EVENT_DATE_TIME] DATETIME2(0) NULL DEFAULT NULL,
  [EVENTS] INT NULL DEFAULT NULL,
  [MESSAGES] INT NULL DEFAULT NULL,
  [DOCUMENTS] INT NULL DEFAULT NULL,
  [DIRECTORY] NVARCHAR(255) NULL DEFAULT NULL,
  [FILENAME] NVARCHAR(255) NULL DEFAULT NULL,
  [STATUS] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT NULL,
  PRIMARY KEY ([CLIENT_ID], [WFID]))
;

-- -----------------------------------------------------
-- Table LW_BP_PARMS`
-- -----------------------------------------------------
CREATE TABLE LW_BP_PARMS (
  [CLIENT_ID] INT NOT NULL DEFAULT 0,
  [BP_NAME] NVARCHAR(255) NOT NULL,
  [PARM_KEY] NVARCHAR(125) NOT NULL,
  [PARM_NAME] NVARCHAR(255) NOT NULL,
  [PARM_DESCRIPTION] NVARCHAR(1000) DEFAULT NULL,
  [DISPLAY_ORDER] INT NOT NULL,
  [IS_FRAMEWORK] TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY ([CLIENT_ID],[BP_NAME],[PARM_KEY])
)
;


-- -----------------------------------------------------
-- Table `LW_DATA`
-- -----------------------------------------------------
CREATE TABLE LW_DATA (
  [ID] NVARCHAR(50) NOT NULL,
  [DATA] VARBINARY(max) NULL DEFAULT NULL,
  [DATA_DATE_TIME] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;


-- -----------------------------------------------------
-- Table `LW_DOCREFLIST`
-- -----------------------------------------------------
CREATE TABLE LW_DOCREFLIST (
  [ID] BIGINT NOT NULL IDENTITY,
  [WFID] BIGINT NOT NULL,
  [REFERENCE] NVARCHAR(255) NULL DEFAULT NULL,
  [ALT_REF] NVARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 )
;

CREATE INDEX [LW_DOCREFLIST_WFID_IDX] ON LW_DOCREFLIST ([WFID] ASC);
CREATE INDEX [LW_DOCREFLIST_REF_IDX] ON LW_DOCREFLIST ([WFID] ASC, [REFERENCE] ASC);
CREATE INDEX [LW_DOCREFLIST_ALTREF_IDX] ON LW_DOCREFLIST ([WFID] ASC, [ALT_REF] ASC);


-- -----------------------------------------------------
-- Table `LW_DOCREFLIST_RESTORE`
-- -----------------------------------------------------
CREATE TABLE LW_DOCREFLIST_RESTORE (
  [ID] BIGINT NOT NULL,
  [WFID] BIGINT NOT NULL,
  [REFERENCE] NVARCHAR(255) NULL DEFAULT NULL,
  [ALT_REF] NVARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 )
;

CREATE INDEX [LW_DOCREFLIST_REF_IDX] ON LW_DOCREFLIST_RESTORE ([WFID] ASC, [REFERENCE] ASC);
CREATE INDEX [LW_DOCREFLIST_ALTREF_IDX] ON LW_DOCREFLIST_RESTORE ([WFID] ASC, [ALT_REF] ASC);


-- -----------------------------------------------------
-- Table `LW_DOCUMENT`
-- -----------------------------------------------------
CREATE TABLE LW_DOCUMENT (
  [CLIENT_ID] INT NOT NULL,
  [WFID] BIGINT NOT NULL,
  [IN_WFID] BIGINT NULL DEFAULT NULL,
  [OUT_WFID] BIGINT NULL DEFAULT NULL,
  [SOURCE_ID] NVARCHAR(255) NOT NULL,
  [SOURCE_NAME] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NOT NULL,
  [DESTINATION_NAME] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(255) NOT NULL,
  [FORMAT] NVARCHAR(255) NULL DEFAULT NULL,
  [STANDARD] NVARCHAR(255) NULL DEFAULT NULL,
  [VERSION] NVARCHAR(255) NULL DEFAULT NULL,
  [TEST_FLAG] CHAR(1) NULL DEFAULT 'N',
  [PARENT_WFID] BIGINT NULL DEFAULT NULL,
  [REFERENCE] NVARCHAR(255) NULL DEFAULT NULL,
  [ALT_REF] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_DATE] DATE NULL DEFAULT NULL,
  [DOCUMENT_TIME] TIME(0) NULL DEFAULT NULL,
  [STATUS] NVARCHAR(255) NOT NULL,
  [STATUS_REASON] NVARCHAR(255) NULL DEFAULT NULL,
  [ACTION_FLAG] CHAR(1) NULL DEFAULT NULL,
  [ORIGINAL_SIZE] BIGINT NULL DEFAULT NULL,
  [FINAL_SIZE] BIGINT NULL DEFAULT NULL,
  [INTERCHANGE_NUMBER] NVARCHAR(45) NULL DEFAULT NULL,
  [GROUP_NUMBER] NVARCHAR(45) NULL DEFAULT NULL,
  [TRANSACTION_NUMBER] NVARCHAR(45) NULL DEFAULT NULL,
  [DOCUMENT_VALUE] DECIMAL(18,5) NULL DEFAULT NULL,
  [CURRENCY_CODE] CHAR(3) NULL DEFAULT NULL,
  [DIRECTION] CHAR(1) NOT NULL DEFAULT 'U',
  [LAST_DATE_TIME] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  [TRANSACTION_LAST_DATE_TIME] DATETIME2(0),
  [TRANSACTION_STATUS] VARCHAR(255),
  [TRANSACTION_STATUS_REASON] VARCHAR(255),
  [DOCUMENT_CREATION_DATE] DATETIME2(0) DEFAULT NULL,
  [DOCUMENT_COUNT] INT NOT NULL DEFAULT 1,
  PRIMARY KEY ([WFID])
 )
;

CREATE INDEX LW_DOC_IDX_CLIENT_WFID ON LW_DOCUMENT (WFID ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_SID ON LW_DOCUMENT (SOURCE_ID ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_SNAME ON LW_DOCUMENT (SOURCE_NAME ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_DID ON LW_DOCUMENT (DESTINATION_ID ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_DNAME ON LW_DOCUMENT (DESTINATION_NAME ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_STATUS ON LW_DOCUMENT (STATUS ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_DTYPE ON LW_DOCUMENT (DOCUMENT_TYPE ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_PAR_WFID ON LW_DOCUMENT (PARENT_WFID ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_IN_WFID ON LW_DOCUMENT (IN_WFID ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_OUT_WFID ON LW_DOCUMENT (OUT_WFID ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_LAST_DATE_TIME ON LW_DOCUMENT (LAST_DATE_TIME ASC, CLIENT_ID ASC);
CREATE INDEX [LW_DOCUMENT_IDX_CLIENT_ID] ON LW_DOCUMENT ([CLIENT_ID] ASC);
CREATE INDEX LW_DOC_IDX_TRANS_DATE_TIME ON LW_DOCUMENT (TRANSACTION_LAST_DATE_TIME ASC, CLIENT_ID ASC) INCLUDE (
    SOURCE_ID,
    DESTINATION_ID,
    DOCUMENT_TYPE,
    FORMAT,
    STANDARD,
    VERSION,
    TRANSACTION_STATUS,
    CURRENCY_CODE,
    DIRECTION
);
CREATE INDEX LW_DOC_IDX_TRANS_STATUS ON LW_DOCUMENT (TRANSACTION_STATUS ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_REF ON LW_DOCUMENT (REFERENCE ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_ALTREF ON LW_DOCUMENT (ALT_REF ASC, CLIENT_ID ASC);

GO

-- -----------------------------------------------------
-- Table `LW_DOCUMENT_EXT`
-- -----------------------------------------------------
CREATE TABLE LW_DOCUMENT_EXT (
  [ID] BIGINT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [DOCUMENT_WFID] BIGINT NOT NULL,
  [DOC_KEY] NVARCHAR(45) NOT NULL,
  [DOC_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY ([ID]))
;

CREATE INDEX [LW_DOCUMENT_EXT_IDX_DOC_WFID] ON LW_DOCUMENT_EXT ([DOCUMENT_WFID] ASC);
CREATE INDEX [IDX_CLIENT_ID] ON LW_DOCUMENT_EXT ([CLIENT_ID] ASC);
CREATE INDEX [IDX_DOC_EXT] ON LW_DOCUMENT_EXT (CLIENT_ID, DOC_KEY, DOC_VALUE);

-- -----------------------------------------------------
-- Table `LW_DOCUMENT_EXT_KEY`
-- -----------------------------------------------------
CREATE TABLE LW_DOCUMENT_EXT_KEY (
  CLIENT_ID INT NOT NULL,
  DOC_KEY NVARCHAR(45) NOT NULL,
  PRIMARY KEY (CLIENT_ID, DOC_KEY)
   )
;

-- -----------------------------------------------------
-- Table `LW_DOCUMENT_EXT_RESTORE`
-- -----------------------------------------------------
CREATE TABLE LW_DOCUMENT_EXT_RESTORE (
  [ID] BIGINT NOT NULL,
  [CLIENT_ID] INT NOT NULL,
  [DOCUMENT_WFID] BIGINT NOT NULL,
  [DOC_KEY] NVARCHAR(45) NULL DEFAULT NULL,
  [DOC_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 )
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_DOCUMENT_EXT_RESTORE ([CLIENT_ID] ASC);
CREATE INDEX [IDX_DOC_WFID] ON LW_DOCUMENT_EXT_RESTORE ([DOCUMENT_WFID] ASC);
CREATE INDEX IDX_DOC_EXT_RES ON LW_DOCUMENT_EXT_RESTORE (CLIENT_ID, DOC_KEY, DOC_VALUE);

-- -----------------------------------------------------
-- Table `LW_DOCUMENT_NOTES`
-- -----------------------------------------------------
CREATE TABLE LW_DOCUMENT_NOTES (
  ID INT NOT NULL IDENTITY,
  DOC_WFID BIGINT NOT NULL,
  NOTE NVARCHAR(1000) NOT NULL,
  DATE_CREATED DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  PRIMARY KEY (ID),
  CONSTRAINT FK_DOCUMENT_NOTES_DOC_WFID_idx
    FOREIGN KEY (DOC_WFID)
    REFERENCES LW_DOCUMENT (WFID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
  ;

-- -----------------------------------------------------
-- Table `LW_DOCUMENT_RESTORE`
-- -----------------------------------------------------
CREATE TABLE LW_DOCUMENT_RESTORE (
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [WFID] BIGINT NOT NULL,
  [IN_WFID] BIGINT NULL DEFAULT NULL,
  [OUT_WFID] BIGINT NULL DEFAULT NULL,
  [SOURCE_ID] NVARCHAR(255) NOT NULL,
  [SOURCE_NAME] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NOT NULL,
  [DESTINATION_NAME] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(255) NOT NULL,
  [FORMAT] NVARCHAR(255) NULL DEFAULT NULL,
  [STANDARD] NVARCHAR(255) NULL DEFAULT NULL,
  [VERSION] NVARCHAR(255) NULL DEFAULT NULL,
  [TEST_FLAG] CHAR(1) NULL DEFAULT 'N',
  [PARENT_WFID] BIGINT NULL DEFAULT NULL,
  [REFERENCE] NVARCHAR(255) NULL DEFAULT NULL,
  [ALT_REF] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_DATE] DATE NULL DEFAULT NULL,
  [DOCUMENT_TIME] TIME(0) NULL DEFAULT NULL,
  [STATUS] NVARCHAR(255) NOT NULL,
  [STATUS_REASON] NVARCHAR(255) NULL DEFAULT NULL,
  [ACTION_FLAG] CHAR(1) NULL DEFAULT NULL,
  [ORIGINAL_SIZE] BIGINT NULL DEFAULT NULL,
  [FINAL_SIZE] BIGINT NULL DEFAULT NULL,
  [INTERCHANGE_NUMBER] NVARCHAR(45) NULL DEFAULT NULL,
  [GROUP_NUMBER] NVARCHAR(45) NULL DEFAULT NULL,
  [TRANSACTION_NUMBER] NVARCHAR(45) NULL DEFAULT NULL,
  [DOCUMENT_VALUE] DECIMAL(18,5) NULL DEFAULT NULL,
  [CURRENCY_CODE] CHAR(3) NULL DEFAULT NULL,
  [DIRECTION] CHAR(1) NOT NULL,
  [LAST_DATE_TIME] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  [TRANSACTION_LAST_DATE_TIME] DATETIME2(0),
  [TRANSACTION_STATUS] VARCHAR(255),
  [TRANSACTION_STATUS_REASON] VARCHAR(255),
  [DOCUMENT_CREATION_DATE] DATETIME2(0) DEFAULT NULL,
  [DOCUMENT_COUNT] INT NOT NULL DEFAULT 1,
  PRIMARY KEY ([WFID])
 )
;

CREATE INDEX LW_DOC_RES_IDX_SID ON LW_DOCUMENT_RESTORE (SOURCE_ID ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_RES_IDX_SNAME ON LW_DOCUMENT_RESTORE (SOURCE_NAME ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_RES_IDX_DID ON LW_DOCUMENT_RESTORE (DESTINATION_ID ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_RES_IDX_DNAME ON LW_DOCUMENT_RESTORE (DESTINATION_NAME ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_RES_IDX_STATUS ON LW_DOCUMENT_RESTORE (STATUS ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_RES_IDX_DTYPE ON LW_DOCUMENT_RESTORE (DOCUMENT_TYPE ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_IDX_RES_PAR_WFID ON LW_DOCUMENT_RESTORE (PARENT_WFID ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_RES_IDX_IN_WFID ON LW_DOCUMENT_RESTORE (IN_WFID ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_RES_IDX_OUT_WFID ON LW_DOCUMENT_RESTORE (OUT_WFID ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_RES_IDX_LAST_DATE_TIME ON LW_DOCUMENT_RESTORE (LAST_DATE_TIME ASC, CLIENT_ID ASC);
CREATE INDEX [LW_DOCUMENT_RESTORE_IDX_CLIENT_ID] ON LW_DOCUMENT_RESTORE ([CLIENT_ID] ASC);
CREATE INDEX LW_DOC_RES_IDX_TRANS_DATE_TIME ON LW_DOCUMENT_RESTORE (TRANSACTION_LAST_DATE_TIME ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_RES_IDX_TRANS_STATUS ON LW_DOCUMENT_RESTORE (TRANSACTION_STATUS ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_RES_IDX_REF ON LW_DOCUMENT_RESTORE (REFERENCE ASC, CLIENT_ID ASC);
CREATE INDEX LW_DOC_RES_IDX_ALTREF ON LW_DOCUMENT_RESTORE (ALT_REF ASC, CLIENT_ID ASC);

-- -----------------------------------------------------
-- Table `LW_DOCUMENT_NOTES_RESTORE`
-- -----------------------------------------------------

CREATE TABLE LW_DOCUMENT_NOTES_RESTORE (
  ID INT NOT NULL,
  DOC_WFID BIGINT NOT NULL,
  NOTE NVARCHAR(1000) NOT NULL,
  DATE_CREATED DATETIME2(0) NOT NULL,
  PRIMARY KEY (ID))
  ;

-- -----------------------------------------------------
-- Table `LW_DOCUMENT_RULES`
-- -----------------------------------------------------
CREATE TABLE LW_DOCUMENT_RULES (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [SOURCE_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(255) NOT NULL,
  [RUN_BEFORE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [BP] NVARCHAR(255) NOT NULL,
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  [SYNC_FLAG] CHAR(1) NOT NULL DEFAULT 'N',
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_DOCUMENT_RULES ([CLIENT_ID] ASC);


-- -----------------------------------------------------
-- Table `LW_DOCUMENT_SUMMARY`
-- -----------------------------------------------------
CREATE TABLE LW_DOCUMENT_SUMMARY (
  [HASH_ID] BINARY(16) NOT NULL,
  [CLIENT_ID] INT NOT NULL,
  [SUMMARY_DATE] DATETIME2(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  [SOURCE_ID] NVARCHAR(255) NOT NULL,
  [DESTINATION_ID] NVARCHAR(255) NOT NULL,
  [DOCUMENT_TYPE] NVARCHAR(255) NOT NULL,
  [FORMAT] NVARCHAR(255) NULL DEFAULT NULL,
  [STANDARD] NVARCHAR(255) NULL DEFAULT NULL,
  [VERSION] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_STATUS] NVARCHAR(255) NOT NULL,
  [CURRENCY_CODE] NVARCHAR(3) NOT NULL,
  [DIRECTION] CHAR(1) NOT NULL,
  [TOTAL_DOCUMENTS] INT NOT NULL,
  [TOTAL_FINANCIAL] DECIMAL(18,2) NOT NULL,
  [FINANCIAL_DOC_COUNT] INT NOT NULL,
  [TOTAL_FINAL_DATA_SIZE] BIGINT NOT NULL DEFAULT 0,
  [TOTAL_ORIGINAL_DATA_SIZE] BIGINT NOT NULL DEFAULT 0,
  [DATA_DOC_COUNT] INT NOT NULL,
  [DATE_CREATED] DATETIME2(0) NULL DEFAULT GETDATE(),
  [SUMMARY_YEAR] CHAR(4) NOT NULL,
  [SUMMARY_MONTH] CHAR(2) NOT NULL,
  [SUMMARY_DAY] CHAR(2) NOT NULL,
  [SUMMARY_HOUR] CHAR(2) NOT NULL,
  PRIMARY KEY ([HASH_ID]))

  CREATE INDEX LW_DOC_SUM_CLIENT_ID_IDX ON LW_DOCUMENT_SUMMARY (CLIENT_ID ASC);
  CREATE INDEX LW_DOC_SUM_SUM_DATE_IDX  ON LW_DOCUMENT_SUMMARY (SUMMARY_DATE ASC);
  CREATE INDEX LW_DOC_SUM_SRC_ID_IDX  ON LW_DOCUMENT_SUMMARY (SOURCE_ID ASC);
  CREATE INDEX LW_DOC_SUM_DEST_ID_IDX  ON LW_DOCUMENT_SUMMARY (DESTINATION_ID ASC);
  CREATE INDEX LW_DOC_SUM_DOC_TYPE_IDX  ON LW_DOCUMENT_SUMMARY (DOCUMENT_TYPE ASC);
  CREATE INDEX LW_DOC_SUM_FORMAT_IDX  ON LW_DOCUMENT_SUMMARY (FORMAT ASC);
  CREATE INDEX LW_DOC_SUM_STD_IDX  ON LW_DOCUMENT_SUMMARY (STANDARD ASC);
  CREATE INDEX LW_DOC_SUM_VERSION_IDX  ON LW_DOCUMENT_SUMMARY (VERSION ASC);
  CREATE INDEX LW_DOC_SUM_DOC_STATUS_IDX  ON LW_DOCUMENT_SUMMARY (DOCUMENT_STATUS ASC);
  CREATE INDEX LW_DOC_SUM_CURRENCY_IDX  ON LW_DOCUMENT_SUMMARY (CURRENCY_CODE ASC);
  CREATE INDEX LW_DOC_SUM_DIRECTION_IDX  ON LW_DOCUMENT_SUMMARY (DIRECTION ASC);
  CREATE INDEX LW_DOC_SUM_SUM_YEAR_IDX  ON LW_DOCUMENT_SUMMARY (SUMMARY_YEAR ASC);
  CREATE INDEX LW_DOC_SUM_SUM_MON_IDX  ON LW_DOCUMENT_SUMMARY (SUMMARY_MONTH ASC);
  CREATE INDEX LW_DOC_SUM_SUM_DAY_IDX  ON LW_DOCUMENT_SUMMARY (SUMMARY_DAY ASC);
  CREATE INDEX LW_DOC_SUM_SUM_HOUR_IDX  ON LW_DOCUMENT_SUMMARY (SUMMARY_HOUR ASC);
;

-- -----------------------------------------------------
-- Table `LW_EDIFACT_OVERRIDES`
-- -----------------------------------------------------
CREATE TABLE LW_EDIFACT_OVERRIDES (
  [ID] INT NOT NULL,
  [ALIAS] NVARCHAR(35) NULL DEFAULT NULL,
  [UNA] NVARCHAR(3) NULL DEFAULT NULL,
  [USE_GROUPS] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_ASSOCIATION_ASSIGNED_CODE] NVARCHAR(6) NULL DEFAULT NULL,
  [MSG_CODE_LIST_DIR_VER_NUM] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_COMMON_ACCESS_REFERENCE] NVARCHAR(35) NULL DEFAULT NULL,
  [MSG_CONTROL_AGENCY] NVARCHAR(2) NULL DEFAULT NULL,
  [MSG_FIRST_AND_LAST_TRANSFER] NVARCHAR(1) NULL DEFAULT NULL,
  [MSG_IMPL_CONTROL_AGENCY] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_IMPL_GUIDELINE_ID] NVARCHAR(14) NULL DEFAULT NULL,
  [MSG_IMPL_GUIDELINE_REL_NUM] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_IMPL_GUIDELINE_VER_NUM] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_REL_NUM] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_SCENARIO_ID] NVARCHAR(14) NULL DEFAULT NULL,
  [MSG_SCENARIO_REL_NUM] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_SCENARIO_VER_NUM] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_SCENARIO_CONTROL_AGENCY] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_SEQUENCE_OF_TRANSFERS] NVARCHAR(2) NULL DEFAULT NULL,
  [MSG_SUBSET_CONTROL_AGENCY] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_SUBSET_ID] NVARCHAR(14) NULL DEFAULT NULL,
  [MSG_SUBSET_REL_NUM] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_SUBSET_VER_NUM] NVARCHAR(3) NULL DEFAULT NULL,
  [MSG_TYPE_SUB_FUNCTION_ID] NVARCHAR(6) NULL DEFAULT NULL,
  [MSG_TYPE] NVARCHAR(6) NULL DEFAULT NULL,
  [MSG_VER_NUM] NVARCHAR(3) NULL DEFAULT NULL,
  [GRP_APPLICATION_PSWD] NVARCHAR(14) NULL DEFAULT NULL,
  [GRP_APPLICATION_RECIPIENT_ID] NVARCHAR(35) NULL DEFAULT NULL,
  [GRP_APPLICATION_SENDER_ID] NVARCHAR(35) NULL DEFAULT NULL,
  [GRP_CONTROL_AGENCY] NVARCHAR(3) NULL DEFAULT NULL,
  [GRP_RECIPIENT_ID_CODE_QUAL] NVARCHAR(4) NULL DEFAULT NULL,
  [GRP_SENDER_ID_CODE_QUAL] NVARCHAR(4) NULL DEFAULT NULL,
  [INT_ACK_OVERDUE_TIME] NVARCHAR(3) NULL DEFAULT NULL,
  [INT_ACK_OVERDUE_TIME_MINUTES] NVARCHAR(2) NULL DEFAULT NULL,
  [INT_ACK_REQUEST] NVARCHAR(1) NULL DEFAULT NULL,
  [INT_AGREEMENT_ID] NVARCHAR(35) NULL DEFAULT NULL,
  [INT_APPLICATION_REFERENCE] NVARCHAR(14) NULL DEFAULT NULL,
  [INT_CHARACTER_ENCODING] NVARCHAR(3) NULL DEFAULT NULL,
  [INT_CONTROL_REFERENCE] NVARCHAR(14) NULL DEFAULT NULL,
  [INT_PROCESSING_PRIORITY_CODE] NVARCHAR(1) NULL DEFAULT NULL,
  [INT_RECIPIENT_ID] NVARCHAR(35) NULL DEFAULT NULL,
  [INT_RECIPIENT_ID_CODE_QUAL] NVARCHAR(4) NULL DEFAULT NULL,
  [INT_RECIPIENT_INTERNAL_ID] NVARCHAR(35) NULL DEFAULT NULL,
  [INT_RECIPIENT_INTERNAL_SUB_ID] NVARCHAR(35) NULL DEFAULT NULL,
  [INT_RECIPIENT_REF_PSWD] NVARCHAR(14) NULL DEFAULT NULL,
  [INT_RECIPIENT_REF_PSWD_QUAL] NVARCHAR(2) NULL DEFAULT NULL,
  [INT_SENDER_ID] NVARCHAR(35) NULL DEFAULT NULL,
  [INT_SENDER_ID_CODE_QUAL] NVARCHAR(4) NULL DEFAULT NULL,
  [INT_SENDER_INTERNAL_ID] NVARCHAR(35) NULL DEFAULT NULL,
  [INT_SENDER_INTERNAL_SUB_ID] NVARCHAR(35) NULL DEFAULT NULL,
  [INT_SRV_CODE_LIST_DIR_VER_NUM] NVARCHAR(6) NULL DEFAULT NULL,
  [INT_SYNTAX_ID] NVARCHAR(4) NULL DEFAULT NULL,
  [INT_SYNTAX_VER_NUM] NVARCHAR(1) NULL DEFAULT NULL,
  [INT_TEST_INDICATOR] NVARCHAR(1) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT NULL,
  [ELEMENT_SEPARATOR] nvarchar(4) DEFAULT NULL,
  [SUBELEMENT_SEPARATOR] nvarchar(4) DEFAULT NULL,
  [SEGMENT_TERMINATOR] nvarchar(4) DEFAULT NULL,
  [RELEASE_CHARACTER] nvarchar(4) DEFAULT NULL,
  [DECIMAL_SEPARATOR] nvarchar(4) DEFAULT NULL,
  [REPEATING_ELEMENT_SEPARATOR] nvarchar(4) DEFAULT NULL,
  PRIMARY KEY ([ID]))
;


-- -----------------------------------------------------
-- Table `LW_EDI_DOCUMENT`
-- -----------------------------------------------------
CREATE TABLE LW_EDI_DOCUMENT (
  [CLIENT_ID] INT NOT NULL,
  [WFID] BIGINT NOT NULL,
  [OUT_WFID] BIGINT NOT NULL,
  [INT_SENDER_ID] NVARCHAR(50) NOT NULL,
  [INT_RECEIVER_ID] NVARCHAR(50) NOT NULL,
  [INT_CONTROL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [GRP_SENDER_ID] NVARCHAR(50) NULL DEFAULT NULL,
  [GRP_RECEIVER_ID] NVARCHAR(50) NULL DEFAULT NULL,
  [GRP_FUNCTION_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [GRP_CONTROL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [TRN_TYPE] NVARCHAR(20) NULL DEFAULT NULL,
  [TRN_CONTROL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [STATUS] NVARCHAR(20) NULL DEFAULT NULL,
  [ACK_WFID] BIGINT NULL DEFAULT NULL,
  [ACK_INT_CTRL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [ACK_GRP_CTRL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [ACK_TRN_CTRL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [ACK_NUM_INC] BIGINT NULL DEFAULT NULL,
  [ACK_NUM_REC] BIGINT NULL DEFAULT NULL,
  [ACK_NUM_ACC] BIGINT NULL DEFAULT NULL,
  [LAST_DATE_TIME] DATETIME2(0) NULL DEFAULT GETDATE(),
  [OVERDUE_DATE_TIME] DATETIME2(0) DEFAULT NULL,
  [GRP_DATE_TIME] DATETIME2(0) DEFAULT NULL,
  PRIMARY KEY ([WFID])
 )
;

CREATE INDEX [LW_EDI_DOCUMENT_GROUP_IDX] ON LW_EDI_DOCUMENT ([GRP_SENDER_ID] ASC, [GRP_RECEIVER_ID] ASC, [GRP_FUNCTION_ID] ASC, [GRP_CONTROL_ID] ASC);
CREATE INDEX [LW_EDI_DOCUMENT_IDX_CLIENT_ID] ON LW_EDI_DOCUMENT ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_EDI_DOCUMENT_RESTORE`
-- -----------------------------------------------------
CREATE TABLE LW_EDI_DOCUMENT_RESTORE (
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [WFID] BIGINT NOT NULL,
  [OUT_WFID] BIGINT NOT NULL,
  [INT_SENDER_ID] NVARCHAR(50) NOT NULL,
  [INT_RECEIVER_ID] NVARCHAR(50) NOT NULL,
  [INT_CONTROL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [GRP_SENDER_ID] NVARCHAR(50) NULL DEFAULT NULL,
  [GRP_RECEIVER_ID] NVARCHAR(50) NULL DEFAULT NULL,
  [GRP_FUNCTION_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [GRP_CONTROL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [TRN_TYPE] NVARCHAR(20) NULL DEFAULT NULL,
  [TRN_CONTROL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [STATUS] NVARCHAR(20) NULL DEFAULT NULL,
  [ACK_WFID] BIGINT NULL DEFAULT NULL,
  [ACK_INT_CTRL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [ACK_GRP_CTRL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [ACK_TRN_CTRL_ID] NVARCHAR(20) NULL DEFAULT NULL,
  [ACK_NUM_INC] BIGINT NULL DEFAULT NULL,
  [ACK_NUM_REC] BIGINT NULL DEFAULT NULL,
  [ACK_NUM_ACC] BIGINT NULL DEFAULT NULL,
  [LAST_DATE_TIME] DATETIME2(0) NULL DEFAULT GETDATE(),
  [OVERDUE_DATE_TIME] DATETIME2(0) DEFAULT NULL,
  [GRP_DATE_TIME] DATETIME2(0) DEFAULT NULL,
  PRIMARY KEY ([WFID])
 )
;

CREATE INDEX [LW_EDI_DOCUMENT_GROUP_IDX] ON LW_EDI_DOCUMENT_RESTORE ([GRP_SENDER_ID] ASC, [GRP_RECEIVER_ID] ASC, [GRP_FUNCTION_ID] ASC, [GRP_CONTROL_ID] ASC);
CREATE INDEX [LW_EDI_DOCUMENT_IDX_CLIENT_ID] ON LW_EDI_DOCUMENT_RESTORE ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_EVENT`
-- -----------------------------------------------------
CREATE TABLE LW_EVENT (
  [ID] BIGINT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [PARENT_WFID] BIGINT NOT NULL,
  [EVENT] NVARCHAR(255) NOT NULL,
  [EVENT_INFO] NVARCHAR(255) NULL DEFAULT NULL,
  [USER_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [WFID] BIGINT NULL DEFAULT NULL,
  [DOCUMENT_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_SIZE] BIGINT NULL DEFAULT NULL,
  [PROCESS_DATA] VARBINARY(max) NULL DEFAULT NULL,
  [EVENT_DATE_TIME] DATETIME2(0) NULL DEFAULT GETDATE(),
  [DOCUMENT_ENCODING] NVARCHAR(255) NOT NULL DEFAULT 'UTF-8',
  PRIMARY KEY ([ID])
 )
;

CREATE INDEX [LW_IDX_EVENT_TIME] ON LW_EVENT ([EVENT_DATE_TIME] ASC);
CREATE INDEX [LW_IDX_PARENT_WFID] ON LW_EVENT ([PARENT_WFID] ASC);
CREATE INDEX [LW_IDX_CLIENT_ID] ON LW_EVENT ([CLIENT_ID] ASC);


-- -----------------------------------------------------
-- Table `LW_EVENT_RESTORE`
-- -----------------------------------------------------
CREATE TABLE LW_EVENT_RESTORE (
  [ID] BIGINT NOT NULL,
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [PARENT_WFID] BIGINT NULL DEFAULT NULL,
  [EVENT] NVARCHAR(255) NULL DEFAULT NULL,
  [EVENT_INFO] NVARCHAR(255) NULL DEFAULT NULL,
  [USER_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [WFID] BIGINT NULL DEFAULT NULL,
  [DOCUMENT_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_SIZE] BIGINT NULL DEFAULT NULL,
  [PROCESS_DATA] VARBINARY(max) NULL DEFAULT NULL,
  [EVENT_DATE_TIME] DATETIME2(0) NULL DEFAULT GETDATE(),
  [DOCUMENT_ENCODING] NVARCHAR(255) NOT NULL DEFAULT 'UTF-8',
  PRIMARY KEY ([ID])
 )
;

CREATE INDEX [LW_IDX_EVENT_TIME] ON LW_EVENT_RESTORE ([EVENT_DATE_TIME] ASC);
CREATE INDEX [LW_IDX_PARENT_WFID] ON LW_EVENT_RESTORE ([PARENT_WFID] ASC);
CREATE INDEX [LW_IDX_CLIENT_ID] ON LW_EVENT_RESTORE ([CLIENT_ID] ASC);


-- -----------------------------------------------------
-- Table `LW_FTPGET_RULES`
-- -----------------------------------------------------
CREATE TABLE LW_FTPGET_RULES (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [BPNAME] NVARCHAR(128) NOT NULL,
  [PROFILE] NVARCHAR(64) NOT NULL,
  [BASE_DIR] NVARCHAR(64) NULL DEFAULT NULL,
  [DIR_LIST] NVARCHAR(255) NULL DEFAULT NULL,
  [FILE_LIST] NVARCHAR(255) NOT NULL,
  [DELETE_FLAG] CHAR(1) NULL DEFAULT 'Y',
  [ARCHIVE_DIR] NVARCHAR(64) NULL DEFAULT NULL,
  [TRANSFER_TYPE] NVARCHAR(6) NULL DEFAULT NULL,
  [CLIENT_ADAPTER] NVARCHAR(128) NULL DEFAULT NULL,
  [QUOTE_CMD] NVARCHAR(255) NULL DEFAULT NULL,
  [ZERO_BYTE_MSG] NVARCHAR(45) NULL DEFAULT NULL,
  [IS_UNIQUE_ARCHIVE] SMALLINT NULL DEFAULT NULL,
  [SSL_NEG] VARCHAR(45) NULL,
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_FTPGET_RULES ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_IDENTITIES`
-- -----------------------------------------------------
CREATE TABLE LW_IDENTITIES (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [IDENTIFIER] NVARCHAR(255) NULL DEFAULT NULL,
  [NAME] NVARCHAR(255) NULL DEFAULT NULL ,
  [NOTES] NVARCHAR(max) NULL,
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [PARENT_IDENTIFIER] NVARCHAR(255) DEFAULT NULL,
  PRIMARY KEY ([ID]),
  CONSTRAINT [IDX_CLIENT_IDENT_UNIQUE] UNIQUE  ([CLIENT_ID] ASC, [IDENTIFIER] ASC))
;

-- -----------------------------------------------------
-- Table `LW_IDENTITY_FIELDS`
-- -----------------------------------------------------
CREATE TABLE LW_IDENTITY_FIELDS (
 [ID] int NOT NULL IDENTITY,
 [CLIENT_ID] int NOT NULL,
 [IDENT_KEY] varchar(45) NOT NULL,
 [DESCRIPTION] varchar(1000) DEFAULT NULL,
 [IS_REQUIRED] smallint NOT NULL DEFAULT '0',
 [DISPLAY_ORDER] int NOT NULL DEFAULT '0',
 PRIMARY KEY ([ID])
) ;

CREATE INDEX [IDX_IDENTITY_FIELDS_CLIENT_ID] ON LW_IDENTITY_FIELDS ([CLIENT_ID]);
CREATE INDEX [IDX_IDENTITY_FIELDS_KEY] ON LW_IDENTITY_FIELDS ([IDENT_KEY]);


-- -----------------------------------------------------
-- Table `LW_IDENTITY_EXT`
-- -----------------------------------------------------
CREATE TABLE LW_IDENTITY_EXT (
  [ID] int NOT NULL IDENTITY,
  [CLIENT_ID] int NOT NULL,
  [IDENTITY_ID] int NOT NULL,
  [IDENT_KEY] varchar(45) NOT NULL,
  [IDENT_VALUE] varchar(255) DEFAULT NULL,
  [PARENT_IDENTIFIER] NVARCHAR(255) DEFAULT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [LW_IDENTITY_EXT_IDENT_ID] FOREIGN KEY ([IDENTITY_ID]) REFERENCES LW_IDENTITIES ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION
) ;

 CREATE INDEX [LW_IDENTITY_EXT_IDENT_ID_idx] ON LW_IDENTITY_EXT ([IDENTITY_ID]);


-- -----------------------------------------------------
-- Table `LW_MESSAGE`
-- -----------------------------------------------------
CREATE TABLE LW_MESSAGE (
  [CLIENT_ID] INT NOT NULL,
  [WFID] BIGINT NOT NULL,
  [DIRECTION] CHAR(1) NOT NULL,
  [PROTOCOL] NVARCHAR(255) NULL DEFAULT NULL ,
  [PROTOCOL_INFO] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM1_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM2_VALUE] NVARCHAR(255) NULL DEFAULT NULL ,
  [REFERENCE] NVARCHAR(255) NULL DEFAULT NULL,
  [FILENAME] NVARCHAR(255) NULL DEFAULT NULL,
  [STATUS] NVARCHAR(255) NULL DEFAULT NULL,
  [STATUS_REASON] NVARCHAR(255) NULL DEFAULT NULL,
  [PARENT_WFID] BIGINT NULL DEFAULT NULL,
  [ACTION_FLAG] CHAR(1) NULL DEFAULT NULL,
  [MESSAGE_SIZE] BIGINT NULL DEFAULT NULL,
  [LAST_DATE_TIME] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  PRIMARY KEY ([WFID])
 )
;

CREATE INDEX MESSAGE_DIR_IDX ON LW_MESSAGE (DIRECTION ASC, CLIENT_ID ASC);
CREATE INDEX MESSAGE_DATE_IDX ON LW_MESSAGE (LAST_DATE_TIME ASC, CLIENT_ID ASC);
CREATE INDEX [MESSAGE_CLIENT_ID] ON LW_MESSAGE ([CLIENT_ID] ASC);
CREATE INDEX MESSAGE_STATUS_IDX ON LW_MESSAGE (STATUS ASC, CLIENT_ID ASC);
CREATE INDEX MESSAGE_FILENAME_IDX ON LW_MESSAGE (FILENAME ASC, CLIENT_ID ASC);
CREATE INDEX MESSAGE_PROTOCOL_IDX ON LW_MESSAGE (PROTOCOL ASC, CLIENT_ID ASC);
CREATE INDEX MESSAGE_CLIENT_WFID_IDX ON LW_MESSAGE (CLIENT_ID ASC, WFID ASC);
CREATE INDEX MESSAGE_PARENT_IDX ON LW_MESSAGE (PARENT_WFID ASC, CLIENT_ID ASC);
CREATE INDEX MESSAGE_DATE_WFID_IDX ON LW_MESSAGE (LAST_DATE_TIME, WFID, CLIENT_ID);

GO


-- -----------------------------------------------------
-- Table `LW_MESSAGE_SUMMARY`
-- -----------------------------------------------------

CREATE TABLE LW_MESSAGE_SUMMARY (
  HASH_ID binary(16) NOT NULL,
  CLIENT_ID int DEFAULT NULL,
  SUMMARY_DATE DATETIME2(0) NOT NULL,
  DIRECTION char(1) NOT NULL,
  PROTOCOL nvarchar(255) DEFAULT NULL,
  PROTOCOL_INFO nvarchar(255) DEFAULT NULL,
  PARM1_VALUE nvarchar(255) DEFAULT NULL,
  PARM2_VALUE nvarchar(255) DEFAULT NULL,
  STATUS nvarchar(255) DEFAULT NULL,
  MSG_COUNT int DEFAULT '0',
  TOTAL_DATA_SIZE BIGINT DEFAULT '0',
  DATA_MSG_COUNT int DEFAULT '0',
  DOC_COUNT int DEFAULT '0',
  DATE_CREATED DATETIME2(0) NOT NULL,
  SUMMARY_YEAR char(4) NOT NULL,
  SUMMARY_MONTH char(2) NOT NULL,
  SUMMARY_DAY char(2) NOT NULL,
  SUMMARY_HOUR char(2) NOT NULL,
  PRIMARY KEY (HASH_ID),
);

CREATE INDEX LW_MSG_SUM_CLIENT_ID_IDX ON LW_MESSAGE_SUMMARY (CLIENT_ID ASC);
CREATE INDEX LW_MSG_SUM_SUM_DATE_IDX  ON LW_MESSAGE_SUMMARY (SUMMARY_DATE ASC);
CREATE INDEX LW_MSG_SUM_DIRECTION_IDX  ON LW_MESSAGE_SUMMARY (DIRECTION ASC);
CREATE INDEX LW_MSG_SUM_PROT_IDX  ON LW_MESSAGE_SUMMARY (PROTOCOL ASC);
CREATE INDEX LW_MSG_SUM_PROINF_IDX  ON LW_MESSAGE_SUMMARY (PROTOCOL_INFO ASC);
CREATE INDEX LW_MSG_SUM_PARM1_IDX  ON LW_MESSAGE_SUMMARY (PARM1_VALUE ASC);
CREATE INDEX LW_MSG_SUM_PARM2_IDX  ON LW_MESSAGE_SUMMARY (PARM2_VALUE ASC);
CREATE INDEX LW_MSG_SUM_STATUS_IDX  ON LW_MESSAGE_SUMMARY (STATUS ASC);
CREATE INDEX LW_MSG_SUM_YEAR_IDX  ON LW_MESSAGE_SUMMARY (SUMMARY_YEAR ASC);
CREATE INDEX LW_MSG_SUM_MON_IDX  ON LW_MESSAGE_SUMMARY (SUMMARY_MONTH ASC);
CREATE INDEX LW_MSG_SUM_DAY_IDX  ON LW_MESSAGE_SUMMARY (SUMMARY_DAY ASC);
CREATE INDEX LW_MSG_SUM_HOUR_IDX  ON LW_MESSAGE_SUMMARY (SUMMARY_HOUR ASC);


-- -----------------------------------------------------
-- Table `LW_MESSAGE_RESTORE`
-- -----------------------------------------------------
CREATE TABLE LW_MESSAGE_RESTORE (
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [WFID] BIGINT NOT NULL,
  [DIRECTION] CHAR(1) NULL DEFAULT NULL,
  [PROTOCOL] NVARCHAR(255) NULL DEFAULT NULL ,
  [PROTOCOL_INFO] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM1_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM2_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  [REFERENCE] NVARCHAR(255) NULL DEFAULT NULL,
  [FILENAME] NVARCHAR(255) NULL DEFAULT NULL,
  [STATUS] NVARCHAR(255) NULL DEFAULT NULL,
  [STATUS_REASON] NVARCHAR(255) NULL DEFAULT NULL,
  [PARENT_WFID] BIGINT NULL DEFAULT NULL,
  [ACTION_FLAG] CHAR(1) NULL DEFAULT NULL,
  [MESSAGE_SIZE] NVARCHAR(45) NULL DEFAULT NULL,
  [LAST_DATE_TIME] DATETIME2(0) NULL DEFAULT NULL,
  PRIMARY KEY ([WFID]))
;

CREATE INDEX MESSAGE_RES_DIR_IDX ON LW_MESSAGE_RESTORE (DIRECTION ASC, CLIENT_ID ASC);
CREATE INDEX MESSAGE_RES_DATE_IDX ON LW_MESSAGE_RESTORE (LAST_DATE_TIME ASC, CLIENT_ID ASC);
CREATE INDEX [MESSAGE_CLIENT_ID] ON LW_MESSAGE_RESTORE ([CLIENT_ID] ASC);
CREATE INDEX MESSAGE_RES_PROTOCOL_IDX ON LW_MESSAGE_RESTORE (PROTOCOL ASC, CLIENT_ID ASC);
CREATE INDEX MESSAGE_RES_STATUS_IDX ON LW_MESSAGE_RESTORE (STATUS ASC, CLIENT_ID ASC);
CREATE INDEX MESSAGE_RES_FILENAME_IDX ON LW_MESSAGE_RESTORE (FILENAME ASC, CLIENT_ID ASC);
CREATE INDEX MESSAGE_RES_CLIENT_WFID_IDX ON LW_MESSAGE_RESTORE (CLIENT_ID ASC, WFID ASC);
CREATE INDEX MESSAGE_RES_PARENT_IDX ON LW_MESSAGE_RESTORE (PARENT_WFID ASC, CLIENT_ID ASC);
CREATE INDEX MESSAGE_DATE_WFID_IDX_RES ON LW_MESSAGE_RESTORE (LAST_DATE_TIME, WFID, CLIENT_ID);

-- -----------------------------------------------------
-- Table `LW_MESSAGE_EXT`
-- -----------------------------------------------------
CREATE TABLE LW_MESSAGE_EXT_RESTORE (
  ID BIGINT NOT NULL,
  CLIENT_ID INT NOT NULL,
  MESSAGE_WFID BIGINT NOT NULL,
  MSG_KEY NVARCHAR(45) DEFAULT NULL,
  MSG_VALUE NVARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ID)
) ;

CREATE INDEX [IDX_MSG_EXT_RES_WFID] ON LW_MESSAGE_EXT_RESTORE (MESSAGE_WFID ASC);
CREATE INDEX [IDX_MSG_EXT_RES_CLIENT_ID] ON LW_MESSAGE_EXT_RESTORE (CLIENT_ID ASC);
CREATE INDEX IDX_MSG_EXT_RES ON LW_MESSAGE_EXT_RESTORE (CLIENT_ID, MSG_KEY, MSG_VALUE);

-- -----------------------------------------------------
-- Table `LW_MESSAGE_EXT`
-- -----------------------------------------------------
CREATE TABLE LW_MESSAGE_EXT(
  ID BIGINT NOT NULL IDENTITY,
  CLIENT_ID INT NOT NULL,
  MESSAGE_WFID BIGINT NOT NULL,
  MSG_KEY NVARCHAR(45) NOT NULL,
  MSG_VALUE NVARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ID)
) ;

CREATE INDEX [IDX_MSG_EXT_WFID] ON LW_MESSAGE_EXT ([MESSAGE_WFID] ASC);
CREATE INDEX [IDX_MSG_EXT_CLIENT_ID] ON LW_MESSAGE_EXT ([CLIENT_ID] ASC);
CREATE INDEX [IDX_MSG_EXT] ON LW_MESSAGE_EXT (CLIENT_ID, MSG_KEY, MSG_VALUE);


-- -----------------------------------------------------
-- Table `LW_MESSAGE_EXT_KEY`
-- -----------------------------------------------------
CREATE TABLE LW_MESSAGE_EXT_KEY (
  CLIENT_ID INT NOT NULL,
  MSG_KEY NVARCHAR(45) NOT NULL,
  PRIMARY KEY (CLIENT_ID, MSG_KEY)
   )
;

-- -----------------------------------------------------
-- Table `LW_NOTIFICATION_RULES`
-- -----------------------------------------------------
CREATE TABLE LW_NOTIFICATION_RULES (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [SOURCE_ID] NVARCHAR(128) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(128) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(128) NULL DEFAULT NULL,
  [TYPE] NVARCHAR(10) NOT NULL,
  [PASS_DOCUMENT] NVARCHAR(10) NOT NULL,
  [BP] NVARCHAR(255) NULL DEFAULT NULL,
  [XSLT] NVARCHAR(255) NULL DEFAULT NULL,
  [ADDRESS] NVARCHAR(255) NOT NULL,
  [SUBJECT] NVARCHAR(255) NULL DEFAULT NULL,
  [SENDER] NVARCHAR(255) NULL DEFAULT NULL,
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_NOTIFICATION_RULES ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_NOTIFICATION_BP_PARM_VALUES`
-- -----------------------------------------------------
CREATE TABLE LW_NOTIFICATION_BP_PARM_VALUES (
  [ID] INT NOT NULL IDENTITY,
  [NOTIFICATION_RULE_ID] INT NOT NULL,
  [PARM_KEY] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [FK_LW_NOTIFICATION_BP_PARM_VALUES_LW_NOTIFICATION_RULES1]
    FOREIGN KEY ([NOTIFICATION_RULE_ID])
    REFERENCES LW_NOTIFICATION_RULES ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_LW_NOTIFICATION_BP_PARM_VALUES_LW_NOTIFICATION_RULES1_IDX] ON LW_NOTIFICATION_BP_PARM_VALUES ([NOTIFICATION_RULE_ID] ASC);


-- -----------------------------------------------------
-- Table `LW_PARTNER`
-- -----------------------------------------------------
CREATE TABLE LW_PARTNER (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [SOURCE_ID] NVARCHAR(255) NOT NULL,
  [SOURCE_NAME] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NOT NULL,
  [DESTINATION_NAME] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(75) NOT NULL,
  [FORMAT] NVARCHAR(75) NOT NULL DEFAULT '',
  [STANDARD] NVARCHAR(75) NOT NULL DEFAULT '',
  [VERSION] NVARCHAR(70) NOT NULL DEFAULT '',
  [DIRECTION] CHAR(1) NULL,
  [RECEIVE_RULE_ID] INT NULL DEFAULT NULL,
  [SPLIT_RULE_ID] INT NULL DEFAULT NULL,
  [ROUTE_RULE_ID] INT NULL DEFAULT NULL,
  [SEND_RULE_ID] INT NULL DEFAULT NULL,
  [RECEIVE_RULE_BP_MAP] NVARCHAR(255) NULL DEFAULT NULL,
  [ROUTE_RULE_PRE_BP_MAP] NVARCHAR(255) NULL DEFAULT NULL,
  [ROUTE_RULE_CORE_BP_MAP] NVARCHAR(255) NULL DEFAULT NULL,
  [ROUTE_RULE_POST_BP_MAP] NVARCHAR(255) NULL DEFAULT NULL,
  [ROUTE_RULE_POST_SEND_BP] NVARCHAR(255) NULL DEFAULT NULL,
  [ROUTE_RULE_ERROR_BP] NVARCHAR(255) NULL DEFAULT NULL,
  [SEND_RULE_PRE_SEND_BP] NVARCHAR(255) NULL DEFAULT NULL,
  [SEND_RULE_SEND_BP] NVARCHAR(255) NULL DEFAULT NULL,
  [LAST_DATE_TIME] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;

CREATE UNIQUE INDEX LW_PARTNER_UNIQUE_ROW ON LW_PARTNER (CLIENT_ID ASC, SOURCE_ID ASC, DESTINATION_ID ASC, DOCUMENT_TYPE ASC, FORMAT ASC, STANDARD ASC, VERSION ASC);

-- -----------------------------------------------------
-- Table `LW_RECEIVE_RULES`
-- -----------------------------------------------------
CREATE TABLE LW_RECEIVE_RULES (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [PROTOCOL] NVARCHAR(255) NOT NULL,
  [PARM1_VALUE] NVARCHAR(255) NOT NULL ,
  [PARM2_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  [FILENAME] NVARCHAR(255) NULL DEFAULT NULL,
  [SOURCE_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(255) NULL DEFAULT NULL,
  [FORMAT] NVARCHAR(255) NULL DEFAULT NULL,
  [STANDARD] NVARCHAR(255) NULL DEFAULT NULL,
  [VERSION] NVARCHAR(255) NULL DEFAULT NULL,
  [BP_OR_MAP] NVARCHAR(255) NULL DEFAULT NULL,
  [USE_ROUTE_FLAG] CHAR(1) NULL DEFAULT 'Y',
  [ENCODING] NVARCHAR(20) NULL DEFAULT NULL,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT GETDATE(),
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_RECEIVE_RULES ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_RECEIVE_BP_PARM_VALUES`
-- -----------------------------------------------------
CREATE TABLE LW_RECEIVE_BP_PARM_VALUES (
  [ID] INT NOT NULL IDENTITY,
  [RECEIVE_RULE_ID] INT NOT NULL,
  [PARM_KEY] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY ([ID], [RECEIVE_RULE_ID])
 ,
  CONSTRAINT [FK_LW_RECEIVE_BP_PARM_VALUES_LW_RECEIVE_RULES1]
    FOREIGN KEY ([RECEIVE_RULE_ID])
    REFERENCES LW_RECEIVE_RULES ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_LW_RECEIVE_BP_PARM_VALUES_LW_RECEIVE_RULES1_IDX] ON LW_RECEIVE_BP_PARM_VALUES ([RECEIVE_RULE_ID] ASC);


-- -----------------------------------------------------
-- Table `LW_PROTOCOL_PARMS`
-- -----------------------------------------------------
CREATE TABLE LW_PROTOCOL_PARMS (
  [PROTOCOL] NVARCHAR(255) NOT NULL,
  [DIRECTION] NCHAR(1) NOT NULL,
  [PARM1_NAME] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM2_NAME] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM1_DESCRIPTION] NVARCHAR(1000) NULL,
  [PARM2_DESCRIPTION] NVARCHAR(1000) NULL,
  [PORTAL_PROTOCOL] SMALLINT NOT NULL DEFAULT 0,
  PRIMARY KEY ([PROTOCOL], [DIRECTION]))
  ;

-- -----------------------------------------------------
-- Table `LW_ROUTE_RULES`
-- -----------------------------------------------------
CREATE TABLE LW_ROUTE_RULES (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [SOURCE_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(255) NOT NULL,
  [FORMAT] NVARCHAR(255) NULL DEFAULT NULL,
  [STANDARD] NVARCHAR(255) NULL DEFAULT NULL,
  [VERSION] NVARCHAR(255) NULL DEFAULT NULL,
  [TEST_FLAG] CHAR(1) NULL DEFAULT NULL,
  [ALLOW_DUPLICATE_FLAG] CHAR(1) NULL DEFAULT 'Y',
  [PRE_BP_OR_MAP] NVARCHAR(255) NULL DEFAULT NULL,
  [CORE_BP_OR_MAP] NVARCHAR(255) NULL DEFAULT NULL,
  [POST_BP_OR_MAP] NVARCHAR(255) NULL DEFAULT NULL,
  [POST_SEND_BP] NVARCHAR(255) NULL DEFAULT NULL,
  [ERROR_BP] NVARCHAR(255) NULL DEFAULT NULL,
  [ALT_DESTINATIONS] NVARCHAR(1024) NULL DEFAULT NULL,
  [SEND_FLAG] CHAR(1) NULL DEFAULT 'Y',
  [DIRECTION] CHAR(1) NOT NULL,
  [ACTIVE_FLAG] CHAR(1) NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_ROUTE_RULES ([CLIENT_ID] ASC);


-- -----------------------------------------------------
-- Table `LW_ROUTE_BP_PARM_VALUES`
-- -----------------------------------------------------
CREATE TABLE LW_ROUTE_BP_PARM_VALUES (
  [ID] INT NOT NULL IDENTITY,
  [ROUTE_RULE_ID] INT NOT NULL,
  [ROUTE_BP_TYPE] NVARCHAR(45) NOT NULL,
  [PARM_KEY] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [FK_LW_RECEIVE_BP_PARM_VALUES_COPY1_LW_ROUTE_RULES1]
    FOREIGN KEY ([ROUTE_RULE_ID])
    REFERENCES LW_ROUTE_RULES ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_LW_RECEIVE_BP_PARM_VALUES_COPY1_LW_ROUTE_RULES1_IDX] ON LW_ROUTE_BP_PARM_VALUES ([ROUTE_RULE_ID] ASC);
CREATE INDEX [ROUTE_TYPE_IDX] ON LW_ROUTE_BP_PARM_VALUES ([ROUTE_BP_TYPE] ASC);


-- -----------------------------------------------------
-- Table `LW_RUN_WINDOW`
-- -----------------------------------------------------
CREATE TABLE LW_RUN_WINDOW (
  [BPNAME] NVARCHAR(255) NOT NULL,
  [WFID] BIGINT NOT NULL,
  [RUN_DATE_TIME] DATETIME2(0) NOT NULL,
  PRIMARY KEY ([BPNAME]))
;


-- -----------------------------------------------------
-- Table `LW_SAP_DOCUMENT`
-- -----------------------------------------------------
CREATE TABLE LW_SAP_DOCUMENT (
  [CLIENT_ID] INT NOT NULL,
  [WFID] BIGINT NOT NULL,
  [PROTOCOL] NVARCHAR(20) NULL DEFAULT NULL,
  [ADAPTER] NVARCHAR(255) NULL DEFAULT NULL,
  [VERSION] NVARCHAR(20) NULL DEFAULT NULL,
  [DOCNUM] NVARCHAR(16) NULL DEFAULT NULL,
  [DOCREL] NVARCHAR(4) NULL DEFAULT NULL,
  [MANDT] CHAR(3) NULL DEFAULT NULL,
  [TEST] CHAR(1) NULL DEFAULT NULL,
  [SNDPRN] NVARCHAR(10) NULL DEFAULT NULL,
  [SNDPOR] NVARCHAR(10) NULL DEFAULT NULL,
  [SNDPRT] CHAR(2) NULL DEFAULT NULL,
  [SNDPFC] CHAR(2) NULL DEFAULT NULL,
  [SNDSAD] CHAR(21) NULL DEFAULT NULL,
  [SNDLAD] CHAR(70) NULL DEFAULT NULL,
  [RCVPRN] NVARCHAR(10) NULL DEFAULT NULL,
  [RCVPOR] NVARCHAR(10) NULL DEFAULT NULL,
  [RCVPRT] CHAR(2) NULL DEFAULT NULL,
  [RCVPFC] CHAR(2) NULL DEFAULT NULL,
  [RCVSAD] CHAR(21) NULL DEFAULT NULL,
  [RCVLAD] CHAR(70) NULL DEFAULT NULL,
  [MESTYP] NVARCHAR(30) NULL DEFAULT NULL,
  [STDMES] NVARCHAR(6) NULL DEFAULT NULL,
  [IDOCTYP] NVARCHAR(30) NULL DEFAULT NULL,
  [MESCOD] CHAR(3) NULL DEFAULT NULL,
  [MESFCT] CHAR(3) NULL DEFAULT NULL,
  [STATUS_REASON] NVARCHAR(70) NULL DEFAULT NULL,
  [STATUS_STEP] CHAR(1) NULL DEFAULT NULL,
  [IDENTIFY_OK] CHAR(1) NULL DEFAULT 'N',
  [TRANSLATION_OK] CHAR(1) NULL DEFAULT 'N',
  [ENVELOPE_OK] CHAR(1) NULL DEFAULT 'N',
  [SEND_OK] CHAR(1) NULL DEFAULT 'N',
  [ACK_OK] CHAR(1) NULL DEFAULT 'N',
  PRIMARY KEY ([WFID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_SAP_DOCUMENT ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_SAP_DOCUMENT_RESTORE`
-- -----------------------------------------------------
CREATE TABLE LW_SAP_DOCUMENT_RESTORE (
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [WFID] BIGINT NOT NULL,
  [PROTOCOL] NVARCHAR(20) NULL DEFAULT NULL,
  [ADAPTER] NVARCHAR(255) NULL DEFAULT NULL,
  [VERSION] NVARCHAR(20) NULL DEFAULT NULL,
  [DOCNUM] NVARCHAR(16) NULL DEFAULT NULL,
  [DOCREL] NVARCHAR(4) NULL DEFAULT NULL,
  [MANDT] CHAR(3) NULL DEFAULT NULL,
  [TEST] CHAR(1) NULL DEFAULT NULL,
  [SNDPRN] NVARCHAR(10) NULL DEFAULT NULL,
  [SNDPOR] NVARCHAR(10) NULL DEFAULT NULL,
  [SNDPRT] CHAR(2) NULL DEFAULT NULL,
  [SNDPFC] CHAR(2) NULL DEFAULT NULL,
  [SNDSAD] CHAR(21) NULL DEFAULT NULL,
  [SNDLAD] CHAR(70) NULL DEFAULT NULL,
  [RCVPRN] NVARCHAR(10) NULL DEFAULT NULL,
  [RCVPOR] NVARCHAR(10) NULL DEFAULT NULL,
  [RCVPRT] CHAR(2) NULL DEFAULT NULL,
  [RCVPFC] CHAR(2) NULL DEFAULT NULL,
  [RCVSAD] CHAR(21) NULL DEFAULT NULL,
  [RCVLAD] CHAR(70) NULL DEFAULT NULL,
  [MESTYP] NVARCHAR(30) NULL DEFAULT NULL,
  [STDMES] NVARCHAR(6) NULL DEFAULT NULL,
  [IDOCTYP] NVARCHAR(30) NULL DEFAULT NULL,
  [MESCOD] CHAR(3) NULL DEFAULT NULL,
  [MESFCT] CHAR(3) NULL DEFAULT NULL,
  [STATUS_REASON] NVARCHAR(70) NULL DEFAULT NULL,
  [STATUS_STEP] CHAR(1) NULL DEFAULT NULL,
  [IDENTIFY_OK] CHAR(1) NULL DEFAULT 'N',
  [TRANSLATION_OK] CHAR(1) NULL DEFAULT 'N',
  [ENVELOPE_OK] CHAR(1) NULL DEFAULT 'N',
  [SEND_OK] CHAR(1) NULL DEFAULT 'N',
  [ACK_OK] CHAR(1) NULL DEFAULT 'N',
  PRIMARY KEY ([WFID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_SAP_DOCUMENT_RESTORE ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_SAP_ROUTING_INBOUND`
-- -----------------------------------------------------
CREATE TABLE LW_SAP_ROUTING_INBOUND (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [SOURCE_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(255) NULL DEFAULT NULL,
  [MANDT] CHAR(3) NULL DEFAULT NULL,
  [SNDPRN] NVARCHAR(10) NULL DEFAULT NULL,
  [SNDPOR] NVARCHAR(10) NULL DEFAULT NULL,
  [SNDPRT] CHAR(2) NULL DEFAULT NULL,
  [SNDPFC] CHAR(2) NULL DEFAULT NULL,
  [SNDSAD] CHAR(21) NULL DEFAULT NULL,
  [SNDLAD] CHAR(70) NULL DEFAULT NULL,
  [RCVPRN] NVARCHAR(10) NULL DEFAULT NULL,
  [RCVPOR] NVARCHAR(10) NULL DEFAULT NULL,
  [RCVPRT] CHAR(2) NULL DEFAULT NULL,
  [RCVPFC] CHAR(2) NULL DEFAULT NULL,
  [RCVSAD] CHAR(21) NULL DEFAULT NULL,
  [RCVLAD] CHAR(70) NULL DEFAULT NULL,
  [CIMTYP] NVARCHAR(30) NULL DEFAULT NULL,
  [MESTYP] NVARCHAR(30) NULL DEFAULT NULL,
  [STDMES] NVARCHAR(6) NULL DEFAULT NULL,
  [IDOCTYP] NVARCHAR(30) NULL DEFAULT NULL,
  [MESCOD] CHAR(3) NULL DEFAULT NULL,
  [MESFCT] CHAR(3) NULL DEFAULT NULL,
  [TEST] CHAR(1) NULL DEFAULT NULL,
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_SAP_ROUTING_INBOUND ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_SAP_ROUTING_OUTBOUND`
-- -----------------------------------------------------
CREATE TABLE LW_SAP_ROUTING_OUTBOUND (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [SNDPRN] NVARCHAR(10) NOT NULL DEFAULT '*',
  [SNDPOR] NVARCHAR(10) NOT NULL DEFAULT '*',
  [SNDPRT] CHAR(2) NOT NULL DEFAULT '*',
  [SNDPFC] CHAR(2) NOT NULL DEFAULT '*',
  [SNDSAD] CHAR(21) NOT NULL DEFAULT '*',
  [SNDLAD] CHAR(70) NOT NULL DEFAULT '*',
  [RCVPRN] NVARCHAR(10) NOT NULL DEFAULT '*',
  [RCVPOR] NVARCHAR(10) NOT NULL DEFAULT '*',
  [RCVPRT] CHAR(2) NOT NULL DEFAULT '*',
  [RCVPFC] CHAR(2) NOT NULL DEFAULT '*',
  [RCVSAD] CHAR(21) NOT NULL DEFAULT '*',
  [RCVLAD] CHAR(70) NOT NULL DEFAULT '*',
  [MESTYP] NVARCHAR(30) NOT NULL DEFAULT '*',
  [STDMES] NVARCHAR(6) NOT NULL DEFAULT '*',
  [IDOCTYP] NVARCHAR(30) NOT NULL DEFAULT '*',
  [MESCOD] CHAR(3) NOT NULL DEFAULT '*',
  [MESFCT] CHAR(3) NOT NULL DEFAULT '*',
  [TEST] CHAR(1) NOT NULL DEFAULT 'P',
  [SOURCE_ID] NVARCHAR(255) NOT NULL DEFAULT '',
  [DESTINATION_ID] NVARCHAR(255) NOT NULL DEFAULT '',
  [DOCUMENT_TYPE] NVARCHAR(255) NOT NULL DEFAULT '',
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_SAP_ROUTING_OUTBOUND ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_SAP_STATUS_EXCLUDE`
-- -----------------------------------------------------
CREATE TABLE LW_SAP_STATUS_EXCLUDE (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [SOURCE_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(255) NULL DEFAULT NULL,
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_SAP_STATUS_EXCLUDE ([CLIENT_ID] ASC);


-- -----------------------------------------------------
-- Table `LW_SEND_RULES`
-- -----------------------------------------------------
CREATE TABLE LW_SEND_RULES (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [SOURCE_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NULL DEFAULT NULL ,
  [DOCUMENT_TYPE] NVARCHAR(255) NULL DEFAULT NULL,
  [EDI_STANDARD] NVARCHAR(32) NULL DEFAULT NULL,
  [EDI_STREAM_FLAG] CHAR(1) NULL DEFAULT 'N',
  [EDI_DEFER_FLAG] CHAR(1) NULL DEFAULT 'N',
  [EDI_BATCH] NVARCHAR(32) NULL DEFAULT NULL,
  [INITIAL_MESSAGE_STATUS] NVARCHAR(32) NULL DEFAULT NULL,
  [PRE_SEND_BP] NVARCHAR(255) NULL DEFAULT NULL,
  [SEND_BP] NVARCHAR(255) NULL DEFAULT NULL,
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_SEND_RULES ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_SEND_BP_PARM_VALUES`
-- -----------------------------------------------------
CREATE TABLE LW_SEND_BP_PARM_VALUES (
  [ID] INT NOT NULL IDENTITY,
  [SEND_RULE_ID] INT NOT NULL,
  [SEND_BP_TYPE] NVARCHAR(45) NOT NULL,
  [PARM_KEY] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [FK_LW_SEND_RULE_PARMS_LW_SEND_RULES1]
    FOREIGN KEY ([SEND_RULE_ID])
    REFERENCES LW_SEND_RULES ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_LW_SEND_RULE_PARMS_LW_SEND_RULES1_IDX] ON LW_SEND_BP_PARM_VALUES ([SEND_RULE_ID] ASC);
CREATE INDEX [bp_type_idx] ON LW_SEND_BP_PARM_VALUES ([SEND_BP_TYPE] ASC);


-- -----------------------------------------------------
-- Table `LW_SOAP_RULES`
-- -----------------------------------------------------
CREATE TABLE LW_SOAP_RULES (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [WEB_SERVICE_NAME] NVARCHAR(128) NOT NULL,
  [REQUEST_BPNAME] NVARCHAR(128) NULL DEFAULT NULL,
  [DS_NAME] NVARCHAR(128) NULL DEFAULT NULL,
  [SOAP_BPNAME] NVARCHAR(128) NULL DEFAULT NULL,
  [SOAP_ACTION] NVARCHAR(128) NULL DEFAULT NULL,
  [SOAP_ENVNS_PREFIX] NVARCHAR(128) NULL DEFAULT NULL,
  [SOAP_ENVNS_URI] NVARCHAR(128) NULL DEFAULT NULL,
  [HTTP_PROFILE] NVARCHAR(128) NULL DEFAULT NULL,
  [HTTP_URI] NVARCHAR(128) NULL DEFAULT NULL,
  [HTTP_CLIENT_ADAPTER] NVARCHAR(128) NULL DEFAULT NULL,
  [RESPONSE_BPNAME] NVARCHAR(128) NULL DEFAULT NULL,
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_SOAP_RULES ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_SPLIT_RULES`
-- -----------------------------------------------------
CREATE TABLE LW_SPLIT_RULES (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [SOURCE_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(255) NULL DEFAULT NULL,
  [FORMAT] NVARCHAR(255) NOT NULL,
  [STANDARD] NVARCHAR(255) NOT NULL,
  [VERSION] NVARCHAR(255) NULL DEFAULT NULL,
  [SPLIT_FLAG] CHAR(1) NULL DEFAULT 'Y',
  [BP_OR_MAP] NVARCHAR(255) NULL DEFAULT NULL,
  [SYNC_FLAG] CHAR(1) NULL DEFAULT 'N',
  [USE_GROUP_FLAG] CHAR(1) NULL DEFAULT 'N',
  [ROUTE_INTERCHANGE] CHAR(1) NULL DEFAULT 'N',
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_SPLIT_RULES ([CLIENT_ID] ASC);


-- -----------------------------------------------------
-- Table `LW_X12_OVERRIDES`
-- -----------------------------------------------------
CREATE TABLE LW_X12_OVERRIDES (
  [ID] INT NOT NULL,
  [ALIAS] NVARCHAR(35) NULL DEFAULT NULL,
  [DOC_ENCODING] NVARCHAR(20) NULL DEFAULT NULL,
  [TRANSACTION_SET_ID_CODE] NVARCHAR(3) NULL DEFAULT NULL,
  [GRP_ACK_OVERDUE_TIME_MINUTES] NVARCHAR(4) NULL DEFAULT NULL,
  [GRP_ACK_OVERDUE_TIME] NVARCHAR(3) NULL DEFAULT NULL,
  [GRP_EXPECT_ACK] NVARCHAR(3) NULL DEFAULT NULL,
  [GRP_FUNCTIONAL_ID_CODE] NVARCHAR(2) NULL DEFAULT NULL,
  [GRP_RECEIVER_ID] NVARCHAR(15) NULL DEFAULT NULL,
  [GRP_RESPONSIBLE_AGENCY_CODE] NVARCHAR(2) NULL DEFAULT NULL,
  [GRP_SENDER_ID] NVARCHAR(15) NULL DEFAULT NULL,
  [GRP_VERSION_RELEASE_ID_CODE] NVARCHAR(12) NULL DEFAULT NULL,
  [INT_ACK_OVERDUE_TIME] NVARCHAR(3) NULL DEFAULT NULL,
  [INT_ACK_OVERDUE_TIME_MINUTES] NVARCHAR(2) NULL DEFAULT NULL,
  [INT_ACK_REQUESTED] NVARCHAR(3) NULL DEFAULT NULL,
  [INT_AUTH_INFORMATION] NVARCHAR(10) NULL DEFAULT NULL,
  [INT_AUTH_INFO_QUAL] NVARCHAR(2) NULL DEFAULT NULL,
  [INT_CONTROL_STANDARDS_ID] NVARCHAR(1) NULL DEFAULT NULL,
  [INT_CONTROL_VER_NUM] NVARCHAR(5) NULL DEFAULT NULL,
  [INT_RECEIVER_ID_QUAL] NVARCHAR(2) NULL DEFAULT NULL,
  [INT_RECEIVER_ID] NVARCHAR(15) NULL DEFAULT NULL,
  [INT_SECURITY_INFORMATION] NVARCHAR(10) NULL DEFAULT NULL,
  [INT_SECURITY_INFO_QUAL] NVARCHAR(2) NULL DEFAULT NULL,
  [INT_SENDER_ID_QUAL] NVARCHAR(2) NULL DEFAULT NULL,
  [INT_SENDER_ID] NVARCHAR(15) NULL DEFAULT NULL,
  [INT_TEST_INDICATOR] NVARCHAR(1) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT NULL,
  [USERNAME] NVARCHAR(45) NULL,
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [ELEMENT_SEPARATOR] nvarchar(4) DEFAULT NULL,
  [SUBELEMENT_SEPARATOR] nvarchar(4) DEFAULT NULL,
  [SEGMENT_TERMINATOR] nvarchar(4) DEFAULT NULL,
  PRIMARY KEY ([ID]))
;

-- -----------------------------------------------------
-- Table `LW_TRADACOMS_OVERRIDES`
-- -----------------------------------------------------
CREATE TABLE LW_TRADACOMS_OVERRIDES (
  ID INT NOT NULL,
  ALIAS NVARCHAR(35) DEFAULT NULL,
  MSG_MHD_TYPE NVARCHAR(6) DEFAULT NULL,
  MSG_TYP_TCDE NVARCHAR(4) DEFAULT NULL,
  MSG_TYP_TTYP NVARCHAR(12) DEFAULT NULL,
  MSG_SDT_SIDN1 NVARCHAR(13) DEFAULT NULL,
  MSG_SDT_SIDN2 NVARCHAR(17) DEFAULT NULL,
  MSG_SDT_SNAM NVARCHAR(40) DEFAULT NULL,
  MSG_SDT_SADD1 NVARCHAR(35) DEFAULT NULL,
  MSG_SDT_SADD2 NVARCHAR(35) DEFAULT NULL,
  MSG_SDT_SADD3 NVARCHAR(35) DEFAULT NULL,
  MSG_SDT_SADD4 NVARCHAR(35) DEFAULT NULL,
  MSG_SDT_SADD5 NVARCHAR(8) DEFAULT NULL,
  MSG_SDT_VATN1 NVARCHAR(9) DEFAULT NULL,
  MSG_SDT_VATN2 NVARCHAR(17) DEFAULT NULL,
  MSG_CDT_CIDN1 NVARCHAR(13) DEFAULT NULL,
  MSG_CDT_CIDN2 NVARCHAR(17) DEFAULT NULL,
  MSG_CDT_CNAM NVARCHAR(40) DEFAULT NULL,
  MSG_CDT_CADD1 NVARCHAR(35) DEFAULT NULL,
  MSG_CDT_CADD2 NVARCHAR(35) DEFAULT NULL,
  MSG_CDT_CADD3 NVARCHAR(35) DEFAULT NULL,
  MSG_CDT_CADD4 NVARCHAR(35) DEFAULT NULL,
  MSG_CDT_CADD5 NVARCHAR(8) DEFAULT NULL,
  MSG_CDT_VATR1 NVARCHAR(9) DEFAULT NULL,
  MSG_CDT_VATR2 NVARCHAR(17) DEFAULT NULL,
  MSG_BDT_BKIC NVARCHAR(2) DEFAULT NULL,
  MSG_BDT_BNAM NVARCHAR(35) DEFAULT NULL,
  MSG_BDT_SVID1 NVARCHAR(6) DEFAULT NULL,
  MSG_BDT_SVID2 NVARCHAR(8) DEFAULT NULL,
  MSG_BDT_BKIN NVARCHAR(17) DEFAULT NULL,
  MSG_BDT_CD31 NVARCHAR(3) DEFAULT NULL,
  MSG_ACD_INLO1 NVARCHAR(13) DEFAULT NULL,
  MSG_ACD_INLO2 NVARCHAR(17) DEFAULT NULL,
  INT_STX_STDS1 NVARCHAR(4) DEFAULT NULL,
  INT_STX_STDS2 NVARCHAR(1) DEFAULT NULL,
  INT_STX_FROM1 NVARCHAR(14) DEFAULT NULL,
  INT_STX_FROM2 NVARCHAR(35) DEFAULT NULL,
  INT_STX_UNTO1 NVARCHAR(14) DEFAULT NULL,
  INT_STX_UNTO2 NVARCHAR(35) DEFAULT NULL,
  INT_STX_RCRF NVARCHAR(14) DEFAULT NULL,
  INT_STX_APRF NVARCHAR(14) DEFAULT NULL,
  INT_STX_PRCD NVARCHAR(1) DEFAULT NULL,
  TIMESTAMP DATETIME2(0) DEFAULT NULL,
  USERNAME NVARCHAR(45) DEFAULT NULL,
  ACTIVE_FLAG CHAR(1) NOT NULL DEFAULT 'Y',
  PRIMARY KEY (ID)
) ;


-- -----------------------------------------------------
-- Table `LW_XML_RULES`
-- -----------------------------------------------------
CREATE TABLE LW_XML_RULES (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [ROOT_TAG] NVARCHAR(255) NOT NULL,
  [CHILD_TAG] NVARCHAR(255) NOT NULL,
  [XSLT] NVARCHAR(100) NULL DEFAULT NULL,
  [SOURCE_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DESTINATION_ID] NVARCHAR(255) NULL DEFAULT NULL,
  [DOCUMENT_TYPE] NVARCHAR(255) NULL DEFAULT NULL,
  [FORMAT] NVARCHAR(255) NULL DEFAULT NULL,
  [STANDARD] NVARCHAR(255) NULL DEFAULT NULL,
  [VERSION] NVARCHAR(255) NULL DEFAULT NULL,
  [TEST_FLAG] NVARCHAR(255) NULL DEFAULT NULL,
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [RULE_VERSION] INT NOT NULL DEFAULT 1,
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NULL DEFAULT GETDATE(),
  [XPATH] NVARCHAR(max) NULL,
  PRIMARY KEY ([ID]))
;

CREATE INDEX [IDX_CLIENT_ID] ON LW_XML_RULES ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LW_DOCUMENT_BP_PARM_VALUES`
-- -----------------------------------------------------
CREATE TABLE LW_DOCUMENT_BP_PARM_VALUES (
  [ID] INT NOT NULL IDENTITY,
  [DOCUMENT_RULE_ID] INT NOT NULL,
  [PARM_KEY] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [fk_LW_DOCUMENT_BP_PARM_VALUES_LW_DOCUMENT_RULES1]
    FOREIGN KEY ([DOCUMENT_RULE_ID])
    REFERENCES LW_DOCUMENT_RULES ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [fk_LW_DOCUMENT_BP_PARM_VALUES_LW_DOCUMENT_RULES1_idx] ON LW_DOCUMENT_BP_PARM_VALUES ([DOCUMENT_RULE_ID] ASC);


-- -----------------------------------------------------
-- Table `LW_SPLIT_BP_PARM_VALUES`
-- -----------------------------------------------------
CREATE TABLE LW_SPLIT_BP_PARM_VALUES (
  [ID] INT NOT NULL IDENTITY,
  [SPLIT_RULE_ID] INT NOT NULL,
  [PARM_KEY] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [fk_LW_SPLIT_BP_PARM_VALUES_LW_SPLIT_RULES1]
    FOREIGN KEY ([SPLIT_RULE_ID])
    REFERENCES LW_SPLIT_RULES ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [fk_LW_SPLIT_BP_PARM_VALUES_LW_SPLIT_RULES1_idx] ON LW_SPLIT_BP_PARM_VALUES ([SPLIT_RULE_ID] ASC);


-- -----------------------------------------------------
-- Table `LW_PORTAL_AUDIT`
-- -----------------------------------------------------
CREATE TABLE LW_PORTAL_AUDIT (
  [WFID] BIGINT NOT NULL DEFAULT '0',
  [USER_ID] NVARCHAR(36) NOT NULL DEFAULT '',
  [COMMUNITY] NVARCHAR(255) NOT NULL DEFAULT '',
  [APPLICATION] NVARCHAR(255) NOT NULL DEFAULT '',
  [ACTION] NVARCHAR(255) NOT NULL DEFAULT '',
  [IP_ADDRESS] NVARCHAR(255) NULL DEFAULT NULL,
  [AUDIT_NOTE] NVARCHAR(255) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  PRIMARY KEY ([WFID])
 )
;

CREATE INDEX [FW1_PORTAL_AUDIT_IDX] ON LW_PORTAL_AUDIT ([WFID] ASC);


-- -----------------------------------------------------
-- Table `LW_PORTAL_RULES`
-- -----------------------------------------------------
CREATE TABLE LW_PORTAL_RULES (
  [ID] BIGINT NOT NULL IDENTITY,
  [USER_ID] NVARCHAR(36) NULL DEFAULT NULL,
  [COMMUNITY] NVARCHAR(255) NULL DEFAULT NULL,
  [APPLICATION] NVARCHAR(255) NOT NULL DEFAULT '',
  [ACTION] NVARCHAR(255) NOT NULL DEFAULT '',
  [ACTION_BP] NVARCHAR(255) NULL DEFAULT NULL,
  [SYNC_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  [AUDIT_FLAG] CHAR(1) NOT NULL DEFAULT 'N',
  [RESPONSE_TYPE] NVARCHAR(255) NOT NULL DEFAULT 'text/xml',
  [USERNAME] NVARCHAR(45) NULL DEFAULT NULL,
  [TIMESTAMP] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  [ACTIVE_FLAG] CHAR(1) NOT NULL DEFAULT 'Y',
  PRIMARY KEY ([ID])
 )
;

CREATE INDEX [FW1_PORTAL_RULES_IDX] ON LW_PORTAL_RULES ([ID] ASC);


-- -----------------------------------------------------
-- Table `LW_SOAP_BP_PARM_VALUES`
-- -----------------------------------------------------
CREATE TABLE LW_SOAP_BP_PARM_VALUES (
  [ID] INT NOT NULL IDENTITY,
  [SOAP_RULE_ID] INT NOT NULL,
  [SOAP_BP_TYPE] NVARCHAR(45) NOT NULL,
  [PARM_KEY] NVARCHAR(255) NULL DEFAULT NULL,
  [PARM_VALUE] NVARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [fk_LW_SOAP_BP_PARM_VALUES_LW_SOAP_RULES1]
    FOREIGN KEY ([SOAP_RULE_ID])
    REFERENCES LW_SOAP_RULES ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [bp_type_idx] ON LW_SOAP_BP_PARM_VALUES ([SOAP_BP_TYPE] ASC);
CREATE INDEX [fk_LW_SOAP_BP_PARM_VALUES_LW_SOAP_RULES1_idx] ON LW_SOAP_BP_PARM_VALUES ([SOAP_RULE_ID] ASC);

GO

-- -----------------------------------------------------
-- Table `LW_RULE_VERSIONS`
-- -----------------------------------------------------
CREATE TABLE LW_RULE_VERSIONS (
  CLIENT_ID INT NOT NULL,
  RULE_TYPE VARCHAR(45) NOT NULL,
  RULE_ID INT NOT NULL,
  VERSION INT NOT NULL,
  JSON_OBJECT NVARCHAR(MAX) NOT NULL,
  CREATED_BY VARCHAR(45) NOT NULL,
  CREATED DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  PRIMARY KEY (CLIENT_ID,RULE_TYPE,RULE_ID,VERSION)
);

GO

-- -----------------------------------------------------
-- Table `LW_TEMP`
-- -----------------------------------------------------
CREATE TABLE LW_TEMP (
  [ID] int NOT NULL IDENTITY,
  [WFID] BIGINT NOT NULL,
  [FIELD1] nvarchar(255) DEFAULT NULL,
  [FIELD2] nvarchar(255) DEFAULT NULL,
  [FIELD3] nvarchar(255) DEFAULT NULL,
  [FIELD4] nvarchar(255) DEFAULT NULL,
  [FIELD5] nvarchar(255) DEFAULT NULL,
  [FIELD6] nvarchar(255) DEFAULT NULL,
  [FIELD7] nvarchar(255) DEFAULT NULL,
  [FIELD8] nvarchar(255) DEFAULT NULL,
  [FIELD9] nvarchar(255) DEFAULT NULL,
  [FIELD10] nvarchar(255) DEFAULT NULL,
  PRIMARY KEY ([ID])
) ;

CREATE INDEX LW_TEMP_IDX_WFID ON LW_TEMP (WFID ASC);

GO

  -- -----------------------------------------
  -- Create the document summarization procedure
  -- -----------------------------------------

CREATE PROCEDURE LW_SUMMARIZE_DOCUMENTS (@daysSummarized INT) AS
  BEGIN

  	DECLARE @startDate datetime2(0);
  	select @startDate = convert(datetime, convert(char(13), DATEADD(d, -1* @daysSummarized, getdate()), 120) + ':00:00', 120);

  	MERGE LW_DOCUMENT_SUMMARY AS T
  	USING (
  	select
  		 HASH_ID,
  		 CLIENT_ID,
  	     SUMMARY_DATE,
  	     SOURCE_ID,
  	     DESTINATION_ID,
  	     DOCUMENT_TYPE,
  	     FORMAT,
  	     STANDARD,
  	     VERSION,
  	     DOCUMENT_STATUS,
  	     ISNULL(CURRENCY_CODE, '') CURRENCY_CODE,
  	     DIRECTION,
  	     ISNULL(TOTAL_DOCUMENTS, 0) TOTAL_DOCUMENTS,
  	     ISNULL(TOTAL_FINANCIAL, 0) TOTAL_FINANCIAL,
  	     ISNULL(FINANCIAL_DOC_COUNT, 0) FINANCIAL_DOC_COUNT,
  	     ISNULL(TOTAL_FINAL_DATA_SIZE, 0) TOTAL_FINAL_DATA_SIZE,
  	     ISNULL(TOTAL_ORIGINAL_DATA_SIZE, 0) TOTAL_ORIGINAL_DATA_SIZE,
  	     ISNULL(DATA_DOC_COUNT, 0) DATA_DOC_COUNT,
  	     DATE_CREATED,
  	     YEAR(SUMMARY_DATE) SUMMARY_YEAR,
  	     MONTH(SUMMARY_DATE) SUMMARY_MONTH,
  	     DAY(SUMMARY_DATE) SUMMARY_DAY,
  	     datepart(hour, SUMMARY_DATE) SUMMARY_HOUR
  	from(
  	select
  		CASE WHEN doc_sum.HASH_ID 			IS NULL THEN tmp_sum.HASH_ID 		ELSE doc_sum.HASH_ID 		END HASH_ID,
  	    CASE WHEN doc_sum.CLIENT_ID 		IS NULL THEN tmp_sum.CLIENT_ID 		ELSE doc_sum.CLIENT_ID 		END CLIENT_ID,
  	    CASE WHEN doc_sum.SUMMARY_DATE 		IS NULL THEN tmp_sum.SUMMARY_DATE 	ELSE doc_sum.SUMMARY_DATE 	END SUMMARY_DATE,
  	    CASE WHEN doc_sum.SOURCE_ID 		IS NULL THEN tmp_sum.SOURCE_ID 		ELSE doc_sum.SOURCE_ID 		END SOURCE_ID,
  	    CASE WHEN doc_sum.DESTINATION_ID 	IS NULL THEN tmp_sum.DESTINATION_ID ELSE doc_sum.DESTINATION_ID END DESTINATION_ID,
  	    CASE WHEN doc_sum.DOCUMENT_TYPE 	IS NULL THEN tmp_sum.DOCUMENT_TYPE 	ELSE doc_sum.DOCUMENT_TYPE 	END DOCUMENT_TYPE,
  	    CASE WHEN doc_sum.FORMAT 			IS NULL THEN tmp_sum.FORMAT 		ELSE doc_sum.FORMAT 		END FORMAT,
  		CASE WHEN doc_sum.STANDARD 			IS NULL THEN tmp_sum.STANDARD		ELSE doc_sum.STANDARD		END STANDARD,
  	    CASE WHEN doc_sum.VERSION 			IS NULL THEN tmp_sum.VERSION		ELSE doc_sum.VERSION		END VERSION,
  	    CASE WHEN doc_sum.DOCUMENT_STATUS 	IS NULL THEN tmp_sum.DOCUMENT_STATUS ELSE doc_sum.DOCUMENT_STATUS	END DOCUMENT_STATUS,
  	    CASE WHEN doc_sum.CURRENCY_CODE 	IS NULL THEN tmp_sum.CURRENCY_CODE	ELSE doc_sum.CURRENCY_CODE	END CURRENCY_CODE,
  	    CASE WHEN doc_sum.DIRECTION 		IS NULL THEN tmp_sum.DIRECTION		ELSE doc_sum.DIRECTION		END DIRECTION,
  		CASE WHEN tmp_sum.TOTAL_DOCUMENTS 	IS NOT NULL THEN tmp_sum.TOTAL_DOCUMENTS	ELSE 0				END TOTAL_DOCUMENTS,
  	    CASE WHEN tmp_sum.TOTAL_FINANCIAL 	IS NOT NULL THEN tmp_sum.TOTAL_FINANCIAL	ELSE 0				END TOTAL_FINANCIAL,
  	    CASE WHEN tmp_sum.FINANCIAL_DOC_COUNT 	IS NOT NULL THEN tmp_sum.FINANCIAL_DOC_COUNT	ELSE 0				END FINANCIAL_DOC_COUNT,
  	    CASE WHEN tmp_sum.TOTAL_FINAL_DATA_SIZE 	IS NOT NULL THEN tmp_sum.TOTAL_FINAL_DATA_SIZE	ELSE 0				END TOTAL_FINAL_DATA_SIZE,
  	    CASE WHEN tmp_sum.TOTAL_ORIGINAL_DATA_SIZE 	IS NOT NULL THEN tmp_sum.TOTAL_ORIGINAL_DATA_SIZE	ELSE 0				END TOTAL_ORIGINAL_DATA_SIZE,
  	    CASE WHEN tmp_sum.DATA_DOC_COUNT 	IS NOT NULL THEN tmp_sum.DATA_DOC_COUNT	ELSE 0				END DATA_DOC_COUNT,
  	    CASE WHEN doc_sum.DATE_CREATED 		IS NULL THEN tmp_sum.DATE_CREATED	ELSE doc_sum.DATE_CREATED	END DATE_CREATED
  	from (
          select
            HASHBYTES('MD5',
                cast(doc.CLIENT_ID as nvarchar(255)) +
                convert(char(19), convert(datetime, cast(doc.TRANSACTION_LAST_DATE_TIME
                    as char(13)) + ':00:00', 120), 120) +
                doc.SOURCE_ID +
                doc.DESTINATION_ID +
                doc.DOCUMENT_TYPE +
                ISNULL(doc.FORMAT, '*') +
                ISNULL(doc.STANDARD, '*') +
                ISNULL(doc.VERSION, '*') +
                ISNULL(doc.TRANSACTION_STATUS, '*') +
                ISNULL(doc.CURRENCY_CODE, '*') +
                ISNULL(doc.DIRECTION, '*')
            ) HASH_ID,
            doc.CLIENT_ID,
            convert(datetime, cast(doc.TRANSACTION_LAST_DATE_TIME
                    as char(13)) + ':00:00', 120) SUMMARY_DATE,
            doc.SOURCE_ID,
            doc.DESTINATION_ID,
            doc.DOCUMENT_TYPE,
            doc.FORMAT,
            doc.STANDARD,
            doc.VERSION,
            doc.TRANSACTION_STATUS DOCUMENT_STATUS,
            doc.CURRENCY_CODE,
            doc.DIRECTION,
            getdate() as DATE_CREATED,
            SUM(doc.DOCUMENT_COUNT) TOTAL_DOCUMENTS,
            SUM(doc.DOCUMENT_VALUE) TOTAL_FINANCIAL,
            SUM(case when doc.DOCUMENT_VALUE is NULL then 0 else 1 end) FINANCIAL_DOC_COUNT,
            SUM(doc.ORIGINAL_SIZE) TOTAL_ORIGINAL_DATA_SIZE,
            SUM(doc.FINAL_SIZE) TOTAL_FINAL_DATA_SIZE,
            SUM(case when doc.ORIGINAL_SIZE is NULL and doc.FINAL_SIZE is NULL then 0 else 1 end) DATA_DOC_COUNT
        from LW_DOCUMENT doc
        LEFT JOIN LW_MESSAGE msg on
            doc.OUT_WFID = msg.WFID
        WHERE doc.CLIENT_ID > 0 and
              doc.TRANSACTION_LAST_DATE_TIME >= @startDate
        group by
            doc.CLIENT_ID,
            convert(datetime, cast(doc.TRANSACTION_LAST_DATE_TIME
                    as char(13)) + ':00:00', 120),
            doc.SOURCE_ID,
            doc.DESTINATION_ID,
            doc.DOCUMENT_TYPE,
            doc.FORMAT,
            doc.STANDARD,
            doc.VERSION,
            doc.TRANSACTION_STATUS,
            doc.CURRENCY_CODE,
            doc.DIRECTION
      ) tmp_sum
  	LEFT JOIN LW_DOCUMENT_SUMMARY doc_sum ON
  		tmp_sum.HASH_ID = doc_sum.HASH_ID
  	WHERE tmp_sum.SUMMARY_DATE > @startDate

  	UNION
  	select
  		CASE WHEN doc_sum.HASH_ID 			IS NULL THEN tmp_sum.HASH_ID 		ELSE doc_sum.HASH_ID 		END HASH_ID,
  	    CASE WHEN doc_sum.CLIENT_ID 		IS NULL THEN tmp_sum.CLIENT_ID 		ELSE doc_sum.CLIENT_ID 		END CLIENT_ID,
  	    CASE WHEN doc_sum.SUMMARY_DATE 		IS NULL THEN tmp_sum.SUMMARY_DATE 	ELSE doc_sum.SUMMARY_DATE 	END SUMMARY_DATE,
  	    CASE WHEN doc_sum.SOURCE_ID 		IS NULL THEN tmp_sum.SOURCE_ID 		ELSE doc_sum.SOURCE_ID 		END SOURCE_ID,
  	    CASE WHEN doc_sum.DESTINATION_ID 	IS NULL THEN tmp_sum.DESTINATION_ID ELSE doc_sum.DESTINATION_ID END DESTINATION_ID,
  	    CASE WHEN doc_sum.DOCUMENT_TYPE 	IS NULL THEN tmp_sum.DOCUMENT_TYPE 	ELSE doc_sum.DOCUMENT_TYPE 	END DOCUMENT_TYPE,
  	    CASE WHEN doc_sum.FORMAT 			IS NULL THEN tmp_sum.FORMAT 		ELSE doc_sum.FORMAT 		END FORMAT,
  		CASE WHEN doc_sum.STANDARD 			IS NULL THEN tmp_sum.STANDARD		ELSE doc_sum.STANDARD		END STANDARD,
  	    CASE WHEN doc_sum.VERSION 			IS NULL THEN tmp_sum.VERSION		ELSE doc_sum.VERSION		END VERSION,
  	    CASE WHEN doc_sum.DOCUMENT_STATUS 	IS NULL THEN tmp_sum.DOCUMENT_STATUS ELSE doc_sum.DOCUMENT_STATUS	END DOCUMENT_STATUS,
  	    CASE WHEN doc_sum.CURRENCY_CODE 	IS NULL THEN tmp_sum.CURRENCY_CODE	ELSE doc_sum.CURRENCY_CODE	END CURRENCY_CODE,
  	    CASE WHEN doc_sum.DIRECTION 		IS NULL THEN tmp_sum.DIRECTION		ELSE doc_sum.DIRECTION		END DIRECTION,
  		CASE WHEN tmp_sum.TOTAL_DOCUMENTS 		IS NOT NULL THEN tmp_sum.TOTAL_DOCUMENTS		ELSE 0		END TOTAL_DOCUMENTS,
  	    CASE WHEN tmp_sum.TOTAL_FINANCIAL 		IS NOT NULL THEN tmp_sum.TOTAL_FINANCIAL		ELSE 0		END TOTAL_FINANCIAL,
  	    CASE WHEN tmp_sum.FINANCIAL_DOC_COUNT 	IS NOT NULL THEN tmp_sum.FINANCIAL_DOC_COUNT	ELSE 0		END FINANCIAL_DOC_COUNT,
  	    CASE WHEN tmp_sum.TOTAL_FINAL_DATA_SIZE IS NOT NULL THEN tmp_sum.TOTAL_FINAL_DATA_SIZE	ELSE 0		END TOTAL_FINAL_DATA_SIZE,
  	    CASE WHEN tmp_sum.TOTAL_ORIGINAL_DATA_SIZE 	IS NOT NULL THEN tmp_sum.TOTAL_ORIGINAL_DATA_SIZE	ELSE 0				END TOTAL_ORIGINAL_DATA_SIZE,
  	    CASE WHEN tmp_sum.DATA_DOC_COUNT 	IS NOT NULL THEN tmp_sum.DATA_DOC_COUNT	ELSE 0				END DATA_DOC_COUNT,
  	    CASE WHEN doc_sum.DATE_CREATED 		IS NULL THEN tmp_sum.DATE_CREATED	ELSE doc_sum.DATE_CREATED	END DATE_CREATED
  	from (
          select
            HASHBYTES('MD5',
                cast(doc.CLIENT_ID as nvarchar(255)) +
                convert(char(19), convert(datetime, cast(doc.TRANSACTION_LAST_DATE_TIME
                    as char(13)) + ':00:00', 120), 120) +
                doc.SOURCE_ID +
                doc.DESTINATION_ID +
                doc.DOCUMENT_TYPE +
                ISNULL(doc.FORMAT, '*') +
                ISNULL(doc.STANDARD, '*') +
                ISNULL(doc.VERSION, '*') +
                ISNULL(doc.TRANSACTION_STATUS, '*') +
                ISNULL(doc.CURRENCY_CODE, '*') +
                ISNULL(doc.DIRECTION, '*')
            ) HASH_ID,
            doc.CLIENT_ID,
            convert(datetime, cast(doc.TRANSACTION_LAST_DATE_TIME
                    as char(13)) + ':00:00', 120) SUMMARY_DATE,
            doc.SOURCE_ID,
            doc.DESTINATION_ID,
            doc.DOCUMENT_TYPE,
            doc.FORMAT,
            doc.STANDARD,
            doc.VERSION,
            doc.TRANSACTION_STATUS DOCUMENT_STATUS,
            doc.CURRENCY_CODE,
            doc.DIRECTION,
            getdate() as DATE_CREATED,
            SUM(doc.DOCUMENT_COUNT) TOTAL_DOCUMENTS,
            SUM(doc.DOCUMENT_VALUE) TOTAL_FINANCIAL,
            SUM(case when doc.DOCUMENT_VALUE is NULL then 0 else 1 end) FINANCIAL_DOC_COUNT,
            SUM(doc.ORIGINAL_SIZE) TOTAL_ORIGINAL_DATA_SIZE,
            SUM(doc.FINAL_SIZE) TOTAL_FINAL_DATA_SIZE,
            SUM(case when doc.ORIGINAL_SIZE is NULL and doc.FINAL_SIZE is NULL then 0 else 1 end) DATA_DOC_COUNT
        from LW_DOCUMENT doc
        LEFT JOIN LW_MESSAGE msg on
            doc.OUT_WFID = msg.WFID
        WHERE doc.CLIENT_ID > 0 and
              doc.TRANSACTION_LAST_DATE_TIME >= @startDate
        group by
            doc.CLIENT_ID,
            convert(datetime, cast(doc.TRANSACTION_LAST_DATE_TIME
                    as char(13)) + ':00:00', 120),
            doc.SOURCE_ID,
            doc.DESTINATION_ID,
            doc.DOCUMENT_TYPE,
            doc.FORMAT,
            doc.STANDARD,
            doc.VERSION,
            doc.TRANSACTION_STATUS,
            doc.CURRENCY_CODE,
            doc.DIRECTION
      ) tmp_sum
  	RIGHT JOIN LW_DOCUMENT_SUMMARY doc_sum ON
  		tmp_sum.HASH_ID = doc_sum.HASH_ID
  	WHERE doc_sum.SUMMARY_DATE > @startDate
  	) tmp
  	) AS S
  	ON (T.HASH_ID = S.HASH_ID)
  	WHEN NOT MATCHED BY TARGET
  	    THEN INSERT
  	    	(HASH_ID,
  			 CLIENT_ID,
  		     SUMMARY_DATE,
  		     SOURCE_ID,
  		     DESTINATION_ID,
  		     DOCUMENT_TYPE,
  		     FORMAT,
  		     STANDARD,
  		     VERSION,
  		     DOCUMENT_STATUS,
  		     CURRENCY_CODE,
  		     DIRECTION,
  		     TOTAL_DOCUMENTS,
  		     TOTAL_FINANCIAL,
  		     FINANCIAL_DOC_COUNT,
  		     TOTAL_FINAL_DATA_SIZE,
  		     TOTAL_ORIGINAL_DATA_SIZE,
  		     DATA_DOC_COUNT,
  		     DATE_CREATED,
  		     SUMMARY_YEAR,
  		     SUMMARY_MONTH,
  		     SUMMARY_DAY,
  		     SUMMARY_HOUR)
  		     VALUES
  		     (HASH_ID,
  			 CLIENT_ID,
  		     SUMMARY_DATE,
  		     SOURCE_ID,
  		     DESTINATION_ID,
  		     DOCUMENT_TYPE,
  		     FORMAT,
  		     STANDARD,
  		     VERSION,
  		     DOCUMENT_STATUS,
  		     CURRENCY_CODE,
  		     DIRECTION,
  		     TOTAL_DOCUMENTS,
  		     TOTAL_FINANCIAL,
  		     FINANCIAL_DOC_COUNT,
  		     TOTAL_FINAL_DATA_SIZE,
  		     TOTAL_ORIGINAL_DATA_SIZE,
  		     DATA_DOC_COUNT,
  		     DATE_CREATED,
  		     SUMMARY_YEAR,
  		     SUMMARY_MONTH,
  		     SUMMARY_DAY,
  		     SUMMARY_HOUR)
  	WHEN MATCHED
  		THEN UPDATE SET
  			 T.TOTAL_DOCUMENTS = S.TOTAL_DOCUMENTS,
  		     T.TOTAL_FINANCIAL = S.TOTAL_FINANCIAL,
  		     T.FINANCIAL_DOC_COUNT = S.FINANCIAL_DOC_COUNT,
  		     T.TOTAL_FINAL_DATA_SIZE = S.TOTAL_FINAL_DATA_SIZE,
  		     T.TOTAL_ORIGINAL_DATA_SIZE = S.TOTAL_ORIGINAL_DATA_SIZE,
  		     T.DATA_DOC_COUNT = S.DATA_DOC_COUNT
  	;

  END
  GO

-- -----------------------------------------------------
-- Message Summarization Stored Procedure
-- -----------------------------------------------------

CREATE PROCEDURE LW_SUMMARIZE_MESSAGES(@daysSummarized INT) AS
BEGIN

  DECLARE @startDate datetime2(0);
  select @startDate = convert(datetime, convert(char(13), DATEADD(d, -1* @daysSummarized, getdate()), 120) + ':00:00', 120);

  MERGE LW_MESSAGE_SUMMARY AS T
  	USING (
  	select
      HASHBYTES('MD5',
         cast(CLIENT_ID as nvarchar(255)) +
         convert(char(13), SUMMARY_DATE, 120) + ':00:00' +
         DIRECTION +
         ISNULL(PROTOCOL, '*') +
         ISNULL(PROTOCOL_INFO, '*') +
         ISNULL(PARM1_VALUE, '*') +
         ISNULL(PARM2_VALUE, '*') +
         ISNULL(STATUS, '*')
       ) as HASH_ID,
  		 CLIENT_ID,
	     SUMMARY_DATE,
	     DIRECTION,
       PROTOCOL,
       PROTOCOL_INFO,
       PARM1_VALUE,
       PARM2_VALUE,
       STATUS,
       MSG_COUNT,
       TOTAL_DATA_SIZE,
       DATA_MSG_COUNT,
       DOC_COUNT,
       getdate() as DATE_CREATED,
       YEAR(SUMMARY_DATE) SUMMARY_YEAR,
	     MONTH(SUMMARY_DATE) SUMMARY_MONTH,
	     DAY(SUMMARY_DATE) SUMMARY_DAY,
	     datepart(hour, SUMMARY_DATE) SUMMARY_HOUR
  	from(
      SELECT
  			msg.CLIENT_ID,
  			convert(datetime, convert(char(13), msg.LAST_DATE_TIME, 120) + ':00:00', 120) as SUMMARY_DATE,
  			msg.DIRECTION,
  			msg.PROTOCOL,
  			msg.PROTOCOL_INFO,
  			msg.PARM1_VALUE,
  			msg.PARM2_VALUE,
  			msg.STATUS,
  			COUNT(msg.WFID) as MSG_COUNT,
  			SUM(ISNULL(msg.MESSAGE_SIZE, 0)) as TOTAL_DATA_SIZE,
  			SUM(ISNULL(CASE WHEN msg.MESSAGE_SIZE IS NULL THEN 0 ELSE 1 END, 0)) as DATA_MSG_COUNT,
  			SUM(ISNULL(CASE WHEN msg.DIRECTION = 'I' THEN doc_in.doc_count ELSE doc_out.doc_count END, 0)) as DOC_COUNT
  		FROM LW_MESSAGE msg
  		LEFT JOIN (
  			select
  				IN_WFID,
  				count(WFID) as doc_count
  			from LW_DOCUMENT
  			group by IN_WFID
  		) as doc_in ON
  			msg.WFID = doc_in.IN_WFID
  		LEFT JOIN (
  			select
  				OUT_WFID,
  				count(WFID) as doc_count
  			from LW_DOCUMENT
  			group by OUT_WFID
  		) as doc_out ON
  			msg.WFID = doc_out.OUT_WFID
  		WHERE msg.LAST_DATE_TIME >= @startDate AND
            msg.CLIENT_ID IS NOT NULL AND
            msg.DIRECTION IS NOT NULL
  		GROUP BY
  			msg.CLIENT_ID,
  			convert(datetime, convert(char(13), msg.LAST_DATE_TIME, 120) + ':00:00', 120),
  			msg.DIRECTION,
  			msg.PROTOCOL,
  			msg.PROTOCOL_INFO,
  			msg.PARM1_VALUE,
  			msg.PARM2_VALUE,
  			msg.STATUS

    ) tmp
  ) AS S
  	ON (T.HASH_ID = S.HASH_ID)
  	WHEN NOT MATCHED BY TARGET
  	    THEN INSERT
  	    	(HASH_ID,
  			   CLIENT_ID,
  		     SUMMARY_DATE,
  		     DIRECTION,
           PROTOCOL,
           PROTOCOL_INFO,
           PARM1_VALUE,
           PARM2_VALUE,
           STATUS,
           MSG_COUNT,
           TOTAL_DATA_SIZE,
           DATA_MSG_COUNT,
           DOC_COUNT,
  		     DATE_CREATED,
  		     SUMMARY_YEAR,
  		     SUMMARY_MONTH,
  		     SUMMARY_DAY,
  		     SUMMARY_HOUR)
  		     VALUES
  		     (HASH_ID,
   			   CLIENT_ID,
   		     SUMMARY_DATE,
   		     DIRECTION,
            PROTOCOL,
            PROTOCOL_INFO,
            PARM1_VALUE,
            PARM2_VALUE,
            STATUS,
            MSG_COUNT,
            TOTAL_DATA_SIZE,
            DATA_MSG_COUNT,
            DOC_COUNT,
   		     DATE_CREATED,
   		     SUMMARY_YEAR,
   		     SUMMARY_MONTH,
   		     SUMMARY_DAY,
   		     SUMMARY_HOUR)
  	WHEN MATCHED
  		THEN UPDATE SET
  			 T.MSG_COUNT = S.MSG_COUNT,
  		     T.TOTAL_DATA_SIZE = S.TOTAL_DATA_SIZE,
  		     T.DATA_MSG_COUNT = S.DATA_MSG_COUNT,
  		     T.DOC_COUNT = S.DOC_COUNT
  	;
END

GO


-- -----------------------------------------------------
-- Partner Update Stored Procedure
-- -----------------------------------------------------

CREATE PROCEDURE LW_UPDATE_PARTNERS(
	@CLIENT_ID INT,
	@SOURCE_ID NVARCHAR(75),
	@SOURCE_NAME NVARCHAR(255),
	@DESTINATION_ID NVARCHAR(75),
	@DESTINATION_NAME NVARCHAR(255),
	@DOCUMENT_TYPE NVARCHAR(75),
	@FORMAT NVARCHAR(75),
	@STANDARD NVARCHAR(75),
	@VERSION NVARCHAR(75),
	@DIRECTION CHAR(1),
	@RECEIVE_RULE_ID INT,
	@SPLIT_RULE_ID INT,
	@ROUTE_RULE_ID INT,
	@SEND_RULE_ID INT,
	@RECEIVE_RULE_BP_MAP NVARCHAR(255),
	@ROUTE_RULE_PRE_BP_MAP NVARCHAR(255),
	@ROUTE_RULE_CORE_BP_MAP NVARCHAR(255),
	@ROUTE_RULE_POST_BP_MAP NVARCHAR(255),
	@ROUTE_RULE_POST_SEND_BP NVARCHAR(255),
	@ROUTE_RULE_ERROR_BP NVARCHAR(255),
	@SEND_RULE_PRE_SEND_BP NVARCHAR(255),
	@SEND_RULE_SEND_BP NVARCHAR(255)
) AS
BEGIN
	DECLARE @RetryCount INT
	DECLARE @Success    BIT
	SELECT @RetryCount = 1, @Success = 0

	-- Create RETRY loop
	WHILE @RetryCount < =  5 AND @Success = 0
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION
			DECLARE @partnerId INT = NULL;
			-- PRINT @RetryCount;

			IF @FORMAT IS NULL OR RTRIM(LTRIM(@FORMAT)) = ''
				set @FORMAT = '.';

			IF @STANDARD IS NULL OR RTRIM(LTRIM(@STANDARD)) = ''
				set @STANDARD = '.';

			IF @VERSION IS NULL OR RTRIM(LTRIM(@VERSION)) = ''
				set @VERSION = '.';


			MERGE INTO LW_PARTNER p1
			USING (
				SELECT
					@CLIENT_ID CLIENT_ID,
					@SOURCE_ID SOURCE_ID,
					@SOURCE_NAME SOURCE_NAME,
					@DESTINATION_ID DESTINATION_ID,
					@DESTINATION_NAME DESTINATION_NAME,
					@DOCUMENT_TYPE DOCUMENT_TYPE,
					@FORMAT FORMAT,
					@STANDARD STANDARD,
					@VERSION VERSION,
					@DIRECTION DIRECTION,
					@RECEIVE_RULE_ID RECEIVE_RULE_ID,
					@SPLIT_RULE_ID SPLIT_RULE_ID,
					@ROUTE_RULE_ID ROUTE_RULE_ID,
					@SEND_RULE_ID SEND_RULE_ID,
					@RECEIVE_RULE_BP_MAP RECEIVE_RULE_BP_MAP,
					@ROUTE_RULE_PRE_BP_MAP ROUTE_RULE_PRE_BP_MAP,
					@ROUTE_RULE_CORE_BP_MAP ROUTE_RULE_CORE_BP_MAP,
					@ROUTE_RULE_POST_BP_MAP ROUTE_RULE_POST_BP_MAP,
					@ROUTE_RULE_POST_SEND_BP ROUTE_RULE_POST_SEND_BP,
					@ROUTE_RULE_ERROR_BP ROUTE_RULE_ERROR_BP,
					@SEND_RULE_PRE_SEND_BP SEND_RULE_PRE_SEND_BP,
					@SEND_RULE_SEND_BP SEND_RULE_SEND_BP
			) p2
			ON
				(p1.CLIENT_ID = p2.CLIENT_ID AND
				p1.SOURCE_ID = p2.SOURCE_ID AND
				p1.DESTINATION_ID = p2.DESTINATION_ID AND
				p1.DOCUMENT_TYPE = p2.DOCUMENT_TYPE AND
				p1.FORMAT = p2.FORMAT AND
				p1.STANDARD = p2.STANDARD AND
				p1.VERSION = p2.VERSION )

			WHEN MATCHED THEN UPDATE
				SET
          DIRECTION = @DIRECTION,
					SOURCE_NAME = @SOURCE_NAME,
					DESTINATION_NAME = @DESTINATION_NAME,
					RECEIVE_RULE_ID = @RECEIVE_RULE_ID,
					SPLIT_RULE_ID = @SPLIT_RULE_ID,
					ROUTE_RULE_ID = @ROUTE_RULE_ID,
					SEND_RULE_ID = @SEND_RULE_ID,
					RECEIVE_RULE_BP_MAP = @RECEIVE_RULE_BP_MAP,
					ROUTE_RULE_PRE_BP_MAP = @ROUTE_RULE_PRE_BP_MAP,
					ROUTE_RULE_CORE_BP_MAP = @ROUTE_RULE_CORE_BP_MAP,
					ROUTE_RULE_POST_BP_MAP = @ROUTE_RULE_POST_BP_MAP,
					ROUTE_RULE_POST_SEND_BP = @ROUTE_RULE_POST_SEND_BP,
					ROUTE_RULE_ERROR_BP = @ROUTE_RULE_ERROR_BP,
					SEND_RULE_PRE_SEND_BP = @SEND_RULE_PRE_SEND_BP,
					SEND_RULE_SEND_BP = @SEND_RULE_SEND_BP,
					LAST_DATE_TIME = GETDATE()

			WHEN NOT MATCHED BY TARGET THEN
				INSERT (
					CLIENT_ID,
					SOURCE_ID,
					SOURCE_NAME,
					DESTINATION_ID,
					DESTINATION_NAME,
					DOCUMENT_TYPE,
					FORMAT,
					STANDARD,
					VERSION,
					DIRECTION,
					RECEIVE_RULE_ID,
					SPLIT_RULE_ID,
					ROUTE_RULE_ID,
					SEND_RULE_ID,
					RECEIVE_RULE_BP_MAP,
					ROUTE_RULE_PRE_BP_MAP,
					ROUTE_RULE_CORE_BP_MAP,
					ROUTE_RULE_POST_BP_MAP,
					ROUTE_RULE_POST_SEND_BP,
					ROUTE_RULE_ERROR_BP,
					SEND_RULE_PRE_SEND_BP,
					SEND_RULE_SEND_BP,
					LAST_DATE_TIME
				) VALUES (
					@CLIENT_ID,
					@SOURCE_ID,
					@SOURCE_NAME,
					@DESTINATION_ID,
					@DESTINATION_NAME,
					@DOCUMENT_TYPE,
					@FORMAT,
					@STANDARD,
					@VERSION,
					@DIRECTION,
					@RECEIVE_RULE_ID,
					@SPLIT_RULE_ID,
					@ROUTE_RULE_ID,
					@SEND_RULE_ID,
					@RECEIVE_RULE_BP_MAP,
					@ROUTE_RULE_PRE_BP_MAP,
					@ROUTE_RULE_CORE_BP_MAP,
					@ROUTE_RULE_POST_BP_MAP,
					@ROUTE_RULE_POST_SEND_BP,
					@ROUTE_RULE_ERROR_BP,
					@SEND_RULE_PRE_SEND_BP,
					@SEND_RULE_SEND_BP,
					GETDATE()
				)

			;

			COMMIT TRANSACTION

			SELECT @Success = 1 -- EXIT THE LOOP
		END TRY

		BEGIN CATCH
			SET @RetryCount = @RetryCount + 1

			IF @RetryCount >= 5
				DECLARE @ErrorMessage NVARCHAR(4000);
				DECLARE @ErrorSeverity INT;
				DECLARE @ErrorState INT;

				SELECT
					@ErrorMessage = ERROR_MESSAGE(),
					@ErrorSeverity = ERROR_SEVERITY(),
					@ErrorState = ERROR_STATE();

				RAISERROR (@ErrorMessage, -- Message text.
						   @ErrorSeverity, -- Severity.
						   @ErrorState -- State.
						   );

		END CATCH

	END -- END LOOP


END

GO

-- -----------------------------------------------------
-- Document Extension Key Summarization
-- -----------------------------------------------------
CREATE PROCEDURE LW_SUMMARIZE_DOCUMENT_EXT AS
  BEGIN
    MERGE INTO LW_DOCUMENT_EXT_KEY T
    USING (
      select
        CLIENT_ID,
        DOC_KEY
      FROM LW_DOCUMENT_EXT
      GROUP BY
        CLIENT_ID,
        DOC_KEY
    ) S
    ON (T.CLIENT_ID = S.CLIENT_ID and T.DOC_KEY = S.DOC_KEY)
    WHEN NOT MATCHED BY TARGET THEN 
	  INSERT
        VALUES (S.CLIENT_ID, S.DOC_KEY)
	WHEN NOT MATCHED BY SOURCE THEN
		DELETE
    ;

  END
GO

-- -----------------------------------------------------
-- Message Extension Key Summarization
-- -----------------------------------------------------
CREATE PROCEDURE LW_SUMMARIZE_MESSAGE_EXT AS
  BEGIN
    MERGE INTO LW_MESSAGE_EXT_KEY T
    USING (
      select
        CLIENT_ID,
        MSG_KEY
      FROM LW_MESSAGE_EXT
      GROUP BY
        CLIENT_ID,
        MSG_KEY
    ) S
    ON (T.CLIENT_ID = S.CLIENT_ID and T.MSG_KEY = S.MSG_KEY)
    WHEN NOT MATCHED BY TARGET THEN 
	  INSERT
        VALUES (S.CLIENT_ID, S.MSG_KEY)
	WHEN NOT MATCHED BY SOURCE THEN
		DELETE
    ;

  END
GO




-- -----------------------------------------------------
-- FILE GATEWAY TABLES
-- -----------------------------------------------------
CREATE TABLE LW_FG_ARRIVEDFILE (
	ARRIVEDFILE_KEY NVARCHAR(24) NOT NULL,
	MESSAGE_ID bigint DEFAULT NULL,
	USER_ID NVARCHAR(100) DEFAULT NULL,
	FILE_NAME NVARCHAR(255) NOT NULL,
	FILE_SIZE bigint NOT NULL,
	MAILBOX_PATH NVARCHAR(255) NOT NULL,
	DATA_FLOW_ID bigint NOT NULL,
	PROD_ORG_KEY char(24) DEFAULT NULL,
	PROD_ORG_NAME NVARCHAR(100) DEFAULT NULL,
	STATE NVARCHAR(40) NOT NULL,
	DOCUMENT_ID NVARCHAR(255) DEFAULT NULL,
	WFID bigint NOT NULL,
	REVIEWED INTEGER NOT NULL DEFAULT '0',
	REPLAY_AF_KEY char(24) DEFAULT NULL,
	REPLAY_COMMENT NVARCHAR(255) DEFAULT NULL,
	ROUTES_REMAIN INTEGER NOT NULL,
	LOCKID INTEGER NOT NULL DEFAULT '0',
	CREATETS DATETIME2(0) DEFAULT GETDATE(),
	MODIFYTS DATETIME2(0) DEFAULT GETDATE(),
	CREATEUSERID NVARCHAR(40) NOT NULL DEFAULT ' ',
	MODIFYUSERID NVARCHAR(40) NOT NULL DEFAULT ' ',
	CREATEPROGID NVARCHAR(40) NOT NULL DEFAULT ' ',
	MODIFYPROGID NVARCHAR(40) NOT NULL DEFAULT ' ',
	DELIVERY_STATE NVARCHAR(40) DEFAULT NULL,
	DIST_MSG_ID NVARCHAR(255) DEFAULT NULL,
    CONSTRAINT FG_ARRFILE_PK PRIMARY KEY (ARRIVEDFILE_KEY)
) ;

CREATE INDEX FG_AF_CREATETS_IDX ON LW_FG_ARRIVEDFILE (CREATETS);
CREATE INDEX FG_AF_DF_IDX ON LW_FG_ARRIVEDFILE (DATA_FLOW_ID);
CREATE INDEX FG_AF_MODIFYTS_IDX ON LW_FG_ARRIVEDFILE (MODIFYTS);
CREATE INDEX FG_AF_ST_IDX ON LW_FG_ARRIVEDFILE (STATE);



CREATE TABLE LW_FG_EVENT (
	EVENT_KEY BIGINT NOT NULL IDENTITY,
	ENTITY_KEY NVARCHAR(255),
	ARRIVEDFILE_KEY NVARCHAR(24),
	ENTITY_TYPE NVARCHAR(40),
	DATA_FLOW_ID BIGINT NOT NULL,
	"TIME" BIGINT NOT NULL,
	COUNTER BIGINT NOT NULL,
	EVENT_CODE NVARCHAR(40) NOT NULL,
	LOCKID INTEGER DEFAULT 0 NOT NULL,
	CREATETS DATETIME2(0) DEFAULT GETDATE(),
	MODIFYTS DATETIME2(0) DEFAULT GETDATE(),
	CREATEUSERID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	MODIFYUSERID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	CREATEPROGID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	MODIFYPROGID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	CONSTRAINT FG_EVT_PK PRIMARY KEY (EVENT_KEY)
);
CREATE INDEX FG_E_DF_IDX ON LW_FG_EVENT (DATA_FLOW_ID);
CREATE INDEX FG_E_E_IDX ON LW_FG_EVENT (ENTITY_KEY);
CREATE INDEX FG_TE_AF_IDX ON LW_FG_EVENT (ARRIVEDFILE_KEY);
CREATE INDEX FG_TE_EC_IDX ON LW_FG_EVENT (EVENT_CODE);
CREATE INDEX FG_TE_MODTS_IDX ON LW_FG_EVENT (MODIFYTS);


CREATE TABLE LW_FG_EVENTATTR (
	EVENTATTR_KEY BIGINT NOT NULL IDENTITY,
	EVENT_KEY BIGINT,
	DATA_FLOW_ID BIGINT NOT NULL,
	ORDINAL INTEGER NOT NULL,
	NAME NVARCHAR(255) NOT NULL,
	VALUE NVARCHAR(255) NOT NULL,
	ARRIVEDFILE_KEY CHAR(24),
	LOCKID INTEGER DEFAULT 0 NOT NULL,
	CREATETS DATETIME2(0) DEFAULT GETDATE(),
	MODIFYTS DATETIME2(0) DEFAULT GETDATE(),
	CREATEUSERID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	MODIFYUSERID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	CREATEPROGID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	MODIFYPROGID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	CONSTRAINT FG_EVTATTR_PK PRIMARY KEY (EVENTATTR_KEY)
);
CREATE INDEX FG_TEA_AF_IDX ON LW_FG_EVENTATTR (ARRIVEDFILE_KEY);
CREATE INDEX FG_TEA_DF_IDX ON LW_FG_EVENTATTR (DATA_FLOW_ID);
CREATE INDEX FG_TEA_EVTKEY_IDX ON LW_FG_EVENTATTR (EVENT_KEY);
CREATE INDEX FG_TEA_NAMVAL_IDX ON LW_FG_EVENTATTR (NAME,VALUE);



CREATE TABLE LW_FG_ROUTE (
	ROUTE_KEY NVARCHAR(24) NOT NULL,
	DATA_FLOW_ID BIGINT NOT NULL,
	ARRIVEDFILE_KEY NVARCHAR(24),
	ROUTCHAN_KEY CHAR(24) NOT NULL,
	CONS_ORG_KEY NVARCHAR(255),
	CONS_ORG_NAME NVARCHAR(100),
	P_FSTRUCT_KEY CHAR(24),
	STATE NVARCHAR(40) NOT NULL,
	START_TIME DATETIME2(0) NOT NULL,
	COMPLETE_TIME DATETIME2(0),
	DELIVS_REMAIN INTEGER NOT NULL,
	LOCKID INTEGER DEFAULT 0 NOT NULL,
	CREATETS DATETIME2(0) DEFAULT GETDATE(),
	MODIFYTS DATETIME2(0) DEFAULT GETDATE(),
	CREATEUSERID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	MODIFYUSERID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	CREATEPROGID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	MODIFYPROGID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	CONSTRAINT FG_ROUTE_PK PRIMARY KEY (ROUTE_KEY)
);
CREATE INDEX FG_RT_AFKEY_IDX ON LW_FG_ROUTE (ARRIVEDFILE_KEY);
CREATE INDEX FG_RT_DF_IDX ON LW_FG_ROUTE (DATA_FLOW_ID);
CREATE INDEX FG_RT_MODIFYTS_IDX ON LW_FG_ROUTE (MODIFYTS);



CREATE TABLE LW_FG_DELIVERY (
	DELIVERY_KEY NVARCHAR(24) NOT NULL,
	ROUTE_KEY NVARCHAR(24) NOT NULL,
	DATA_FLOW_ID BIGINT NOT NULL,
	STATE NVARCHAR(40) NOT NULL,
	DELIVCHAN_KEY CHAR(24),
	CONSUMER_DOCID NVARCHAR(255),
	CONTENT_TYPE NVARCHAR(100),
	FILENAME NVARCHAR(255),
	CONSDOC_TYPE NVARCHAR(100),
	MAILBOX_PATH NVARCHAR(255),
	LATE_CREATE_MBX CHAR(1) DEFAULT 'N',
	CONSUMER_MSGID BIGINT,
	ASYNC_XFER_ID NVARCHAR(255),
	LOCKID INTEGER DEFAULT 0 NOT NULL,
	CREATETS DATETIME2(0) DEFAULT GETDATE(),
	MODIFYTS DATETIME2(0) DEFAULT GETDATE(),
	CREATEUSERID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	MODIFYUSERID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	CREATEPROGID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	MODIFYPROGID NVARCHAR(40) DEFAULT ' ' NOT NULL,
	DIST_CONSUMER_MSGID NVARCHAR(255),
	CONSTRAINT FG_DELIVERY_PK PRIMARY KEY (DELIVERY_KEY)
);
CREATE INDEX FG_ASYNC_IDX ON LW_FG_DELIVERY (ASYNC_XFER_ID);
CREATE INDEX FG_DEL_DF_IDX ON LW_FG_DELIVERY (DATA_FLOW_ID);
CREATE INDEX FG_DEL_ROUTKEY_IDX ON LW_FG_DELIVERY (ROUTE_KEY);
CREATE INDEX FG_DV_DOC_IDX ON LW_FG_DELIVERY (CONSUMER_DOCID);
CREATE INDEX FG_DV_MODIFYTS_IDX ON LW_FG_DELIVERY (MODIFYTS);
CREATE INDEX FG_DV_MSG_IDX ON LW_FG_DELIVERY (CONSUMER_MSGID);
CREATE INDEX FG_DV_ST_IDX ON LW_FG_DELIVERY (STATE);




CREATE TABLE LW_FG_ALERT_FILTER (
  ID INT NOT NULL IDENTITY,
  CLIENT_ID INT NOT NULL,
  NAME NVARCHAR(45) NOT NULL,
  MESSAGE NVARCHAR(255) NOT NULL,
  FILENAME_REGEX NVARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ID)
);


CREATE TABLE LW_FG_ALERT_FILTER_CODE (
  FG_ALERT_FILTER_ID INT NOT NULL,
  EVENT_CODE NVARCHAR(40) NOT NULL,
  PRIMARY KEY (FG_ALERT_FILTER_ID,EVENT_CODE),
  CONSTRAINT FK_ALERT_FILTER_CODE_FILTER_ID FOREIGN KEY (FG_ALERT_FILTER_ID) REFERENCES LW_FG_ALERT_FILTER (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
);


CREATE TABLE LW_FG_ALERT (
  ID INT NOT NULL IDENTITY,
  ARRIVEDFILE_KEY NVARCHAR(24) DEFAULT NULL,
  MESSAGE NVARCHAR(255) NOT NULL,
  DATE_CREATED DATETIME2(0) DEFAULT GETDATE(),
  CONSTRAINT FG_ALERT_PK PRIMARY KEY (ID)
);


GO


-- -----------------------------------------------------
-- TESTING TABLES
-- -----------------------------------------------------
CREATE TABLE LW_TEST_CASE (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [NAME] NVARCHAR(45) NOT NULL,
  [TEST_TYPE] NVARCHAR(10) NOT NULL,
  [DATE_CREATED] DATETIME2(3) NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT [UNQ_CLIENT_NAME] UNIQUE  ([CLIENT_ID] ASC, [NAME] ASC)
);

CREATE TABLE LW_TEST_CASE_MAP (
  [TEST_CASE_ID] INT NOT NULL,
  [MAP_NAME] NVARCHAR(255) NOT NULL,
  [VALIDATE_IN] SMALLINT NOT NULL DEFAULT '1',
  [VALIDATE_OUT] SMALLINT NOT NULL DEFAULT '1',
  [INPUT_FILE] NVARCHAR(400) NOT NULL,
  [RESULT_FILE] NVARCHAR(400) NOT NULL,
  PRIMARY KEY (TEST_CASE_ID),
  CONSTRAINT [FK_TC_MAP_TC_ID] FOREIGN KEY (TEST_CASE_ID) REFERENCES LW_TEST_CASE (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE LW_TEST_CASE_RESULT (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [TEST_CASE_ID] INT NOT NULL,
  [STATUS] NVARCHAR(45) NOT NULL,
  [STATUS_REASON] NVARCHAR(1000) DEFAULT NULL,
  [START_DATE] DATETIME2(3) NOT NULL,
  [END_DATE] DATETIME2(3) DEFAULT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT [FK_TCR_TEST_CASE_ID] FOREIGN KEY (TEST_CASE_ID) REFERENCES LW_TEST_CASE (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
);

GO
