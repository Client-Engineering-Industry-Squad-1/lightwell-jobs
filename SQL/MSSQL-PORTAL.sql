-- -----------------------------------------------------
-- Portal Database Installation Script
-- Portal Version: v2.12.0+
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `LP_CLIENT`
-- -----------------------------------------------------
CREATE TABLE LP_CLIENT (
  [ID] INT NOT NULL IDENTITY,
  [ORG_KEY] NVARCHAR(24) NULL DEFAULT NULL ,
  [ORG_CODE] NVARCHAR(24) NULL DEFAULT NULL ,
  [ORG_NAME] NVARCHAR(100) NULL DEFAULT NULL ,
  [CORPORATE_ADDRESS] NVARCHAR(255) NULL DEFAULT NULL,
  [CONTACT_ADDRESS] NVARCHAR(255) NULL DEFAULT NULL,
  [BILLING_ADDRESS] NVARCHAR(255) NULL DEFAULT NULL,
  [PHONE] NVARCHAR(45) NULL DEFAULT NULL,
  [EMAIL] NVARCHAR(255) NULL DEFAULT NULL,
  [B2B_IDENTIFIER] NVARCHAR(255) NULL DEFAULT NULL ,
  [IS_HOST] TINYINT NOT NULL DEFAULT '0',
  [DATE_CREATED] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  [ENABLED] TINYINT NOT NULL DEFAULT '1',
  [OAUTH_SECRET] NVARCHAR(100) NOT NULL,
  [LOGO] NVARCHAR(max) NULL,
  [LOGO_FILE_TYPE] NVARCHAR(255) NULL,
  [DISPLAY_TIMEZONE] NVARCHAR(45) DEFAULT 'America/New_York' NOT NULL,
  PRIMARY KEY ([ID]))
;

-- -----------------------------------------------------
-- Table `LP_CLIENT_LDAP`
-- -----------------------------------------------------
CREATE TABLE LP_CLIENT_LDAP (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [NAME] NVARCHAR(255) NULL DEFAULT NULL,
  [DATE_CREATED] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  [LDAP_HOST] NVARCHAR(255) NULL DEFAULT NULL,
  [LDAP_PORT] INT NULL DEFAULT NULL,
  [LDAP_BASE] NVARCHAR(255) NULL DEFAULT NULL,
  [LDAP_USER_DN] NVARCHAR(255) NULL DEFAULT NULL,
  [LDAP_USER_SEARCH_ATTR] NVARCHAR(255) NULL,
  [LDAP_PASSWORD] NVARCHAR(255) NULL DEFAULT NULL,
  [LDAP_SECURE] TINYINT NOT NULL DEFAULT 0,
  [LDAP_IGNORE_PARTIAL_RESULT_EX] TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY ([ID]),
  CONSTRAINT [FK_CLIENT_LDAP_CLIENT_ID]
    FOREIGN KEY ([CLIENT_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
  )
;

-- -----------------------------------------------------
-- Table `LP_CLIENT_UNIT`
-- -----------------------------------------------------
CREATE TABLE LP_CLIENT_UNIT (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [NAME] NVARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [FK_CLIENT_UNITS_CLIENTS1]
    FOREIGN KEY ([CLIENT_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_CLIENT_UNITS_CLIENTS1_IDX] ON LP_CLIENT_UNIT ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LP_OAUTH2_CONFIG`
-- -----------------------------------------------------
CREATE TABLE LP_OAUTH2_CONFIG (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [OAUTH_LOGIN_PAGE] NVARCHAR(255) NULL DEFAULT NULL,
  [OAUTH_USERNAME_ATTRIBUTE_NAME] NVARCHAR(50) NULL DEFAULT NULL,
  [OAUTH_REGISTRATION_ID] NVARCHAR(100) NOT NULL,
  [OAUTH_CLIENT_ID] NVARCHAR(50) NOT NULL,
  [OAUTH_CLIENT_NAME] NVARCHAR(100) NOT NULL,
  [OAUTH_CLIENT_SECRET] NVARCHAR(128) NOT NULL,
  [OAUTH_REDIRECT_URI] NVARCHAR(128) NOT NULL,
  [OAUTH_AUTHORIZATION_URI] NVARCHAR(128) NOT NULL,
  [OAUTH_TOKEN_URI] NVARCHAR(128) NOT NULL,
  [OAUTH_USER_INFO_URI] NVARCHAR(128) NOT NULL,
  [OAUTH_JWK_SET_URI] NVARCHAR(128) NOT NULL,
  [ENABLED] TINYINT NOT NULL DEFAULT 0,
  [USER_CREATED] NVARCHAR(100) NOT NULL,
  [DATE_CREATED] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  [USER_UPDATED] NVARCHAR(100), 
  [DATE_UPDATED] DATETIME2(0),
  PRIMARY KEY ([ID]),
  CONSTRAINT [FK_OAUTH2_CONFIG_CLIENT_ID]
    FOREIGN KEY ([CLIENT_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

-- -----------------------------------------------------
-- Table `LP_SAML_CONFIG`
-- -----------------------------------------------------
CREATE TABLE LP_SAML_CONFIG (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [SAML_NAME] NVARCHAR(100) NOT NULL,
  [SAML_REGISTRATION_ID] NVARCHAR(100) NOT NULL,
  [SAML_METADATA_URL] NVARCHAR(255) NOT NULL,
  [SAML_SIGNING_CERT_PUBLIC_KEY_LOCATION] NVARCHAR(255) NOT NULL,
  [SAML_SIGNING_CERT_PRIVATE_KEY_LOCATION] NVARCHAR(255) NOT NULL,
  [ENABLED] TINYINT NOT NULL DEFAULT 0,
  [USER_CREATED] NVARCHAR(100) NOT NULL,
  [DATE_CREATED] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  [USER_UPDATED] NVARCHAR(100), 
  [DATE_UPDATED] DATETIME2(0),
  PRIMARY KEY ([ID]),
  CONSTRAINT [FK_SAML_CONFIG_CLIENT_ID]
    FOREIGN KEY ([CLIENT_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

-- -----------------------------------------------------
-- Table `LP_USER`
-- -----------------------------------------------------
CREATE TABLE LP_USER (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [USERNAME] NVARCHAR(45) NOT NULL,
  [EMAIL] NVARCHAR(100) NOT NULL,
  [PASSWORD] NVARCHAR(255) NULL DEFAULT NULL,
  [GIVEN_NAME] NVARCHAR(45) NULL DEFAULT NULL,
  [FAMILY_NAME] NVARCHAR(45) NULL DEFAULT NULL,
  [PHONE] NVARCHAR(45) NULL DEFAULT NULL,
  [LANGUAGE] INT NOT NULL DEFAULT '1' ,
  [DISPLAY_TIMEZONE] NVARCHAR(45) NOT NULL DEFAULT 'America/New_York',
  [ENABLED] TINYINT NOT NULL DEFAULT '1' ,
  [DISPLAY_24H] SMALLINT NOT NULL DEFAULT 0,
  [DATE_CREATED] DATETIME2(0) NULL,
  [DEFAULT_DATA_REFRESH_RATE] INT NOT NULL DEFAULT 0,
  [DEFAULT_VISIBILITY_WINDOW] INT NOT NULL DEFAULT 0,
  [AUTO_SEARCH_ENABLED] SMALLINT NOT NULL DEFAULT 1,
  [AUTH_METHOD] INT NOT NULL DEFAULT 0,
  [AUTH_METHOD_ID] INT NULL DEFAULT NULL,
  PRIMARY KEY ([ID]),
  CONSTRAINT [USER_UNIQUE_CLIENT_USERNAME] UNIQUE  ([CLIENT_ID] ASC, [USERNAME] ASC),
  CONSTRAINT [fk_user_client_id]
    FOREIGN KEY ([CLIENT_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [fk_user_client_id_idx] ON LP_USER ([CLIENT_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_DOCUMENT_FILTER`
-- -----------------------------------------------------
CREATE TABLE LP_DOCUMENT_FILTER (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [NAME] NVARCHAR(45) NOT NULL,
  [CONJUNCTION] TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [FK_DOCUMENT_FILTER_CLIENT1]
    FOREIGN KEY ([CLIENT_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_DOCUMENT_GROUP_CLIENT1_IDX] ON LP_DOCUMENT_FILTER ([CLIENT_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_DOCUMENT_FILTER_DESTINATION`
-- -----------------------------------------------------
CREATE TABLE LP_DOCUMENT_FILTER_DESTINATION (
  [DOCUMENT_FILTER_ID] INT NOT NULL,
  [DESTINATION_ID] NVARCHAR(255) NOT NULL,
  PRIMARY KEY ([DESTINATION_ID], [DOCUMENT_FILTER_ID])
 ,
  CONSTRAINT [FK_DOCUMENT_FILTER_DESTINATION_DOCUMENT_GROUP1]
    FOREIGN KEY ([DOCUMENT_FILTER_ID])
    REFERENCES LP_DOCUMENT_FILTER ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_DOCUMENT_GROUP_DESTINATION_DOCUMENT_GROUP1_IDX] ON LP_DOCUMENT_FILTER_DESTINATION ([DOCUMENT_FILTER_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_DOCUMENT_FILTER_SOURCE`
-- -----------------------------------------------------
CREATE TABLE LP_DOCUMENT_FILTER_SOURCE (
  [DOCUMENT_FILTER_ID] INT NOT NULL,
  [SOURCE_ID] NVARCHAR(255) NOT NULL,
  PRIMARY KEY ([SOURCE_ID], [DOCUMENT_FILTER_ID])
 ,
  CONSTRAINT [FK_DOCUMENT_FILTER_SOURCE_DOCUMENT_GROUP1]
    FOREIGN KEY ([DOCUMENT_FILTER_ID])
    REFERENCES LP_DOCUMENT_FILTER ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_DOCUMENT_GROUP_SOURCE_DOCUMENT_GROUP1_IDX] ON LP_DOCUMENT_FILTER_SOURCE ([DOCUMENT_FILTER_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_DOCUMENT_FILTER_TYPE`
-- -----------------------------------------------------
CREATE TABLE LP_DOCUMENT_FILTER_TYPE (
  [DOCUMENT_FILTER_ID] INT NOT NULL,
  [DOCUMENT_TYPE] NVARCHAR(45) NOT NULL,
  PRIMARY KEY ([DOCUMENT_FILTER_ID], [DOCUMENT_TYPE])
 ,
  CONSTRAINT [FK_DOCUMENT_FILTER_TYPES_DOCUMENT_GROUP1]
    FOREIGN KEY ([DOCUMENT_FILTER_ID])
    REFERENCES LP_DOCUMENT_FILTER ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_DOCUMENT_GROUP_TYPES_DOCUMENT_GROUP1_IDX] ON LP_DOCUMENT_FILTER_TYPE ([DOCUMENT_FILTER_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_CLIENT_PARTNER`
-- -----------------------------------------------------
CREATE TABLE LP_CLIENT_PARTNER (
  [CLIENT_ID] INT NOT NULL,
  [PARTNER_ID] INT NOT NULL
 ,
  CONSTRAINT [FK_ENTITY_PARTNERS_ENTITIES1]
    FOREIGN KEY ([CLIENT_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT [FK_ENTITY_PARTNERS_ENTITIES2]
    FOREIGN KEY ([PARTNER_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_ENTITY_PARTNERS_ENTITIES1_IDX] ON LP_CLIENT_PARTNER ([CLIENT_ID] ASC);
CREATE INDEX [FK_ENTITY_PARTNERS_ENTITIES2_IDX] ON LP_CLIENT_PARTNER ([PARTNER_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_LOG`
-- -----------------------------------------------------
CREATE TABLE LP_LOG (
  [ID] INT NOT NULL IDENTITY,
  [CATEGORY] NVARCHAR(255) NOT NULL,
  [TIMESTAMP] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  [SEVERITY] NVARCHAR(255) NOT NULL,
  [MESSAGE] NVARCHAR(1000) NOT NULL,
  [DETAILS] NVARCHAR(1000) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 )
;

CREATE INDEX [LOG_TIMESTAMP_IDX] ON LP_LOG ([TIMESTAMP] ASC);
CREATE INDEX [LOG_CATEGORY_IDX] ON LP_LOG ([CATEGORY] ASC);
CREATE INDEX [LOG_SEVERITY_IDX] ON LP_LOG ([SEVERITY] ASC);

-- -----------------------------------------------------
-- Table `LP_OAUTH_ACCESS_TOKEN`
-- -----------------------------------------------------
CREATE TABLE LP_OAUTH_ACCESS_TOKEN (
  TOKEN_ID NVARCHAR(255) DEFAULT NULL,
  TOKEN VARBINARY(max),
  AUTHENTICATION_ID NVARCHAR(255) NOT NULL,
  USER_NAME NVARCHAR(255) DEFAULT NULL,
  CLIENT_ID NVARCHAR(255) DEFAULT NULL,
  AUTHENTICATION VARBINARY(max),
  REFRESH_TOKEN NVARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (AUTHENTICATION_ID)
) ;

CREATE INDEX OAUTH_TKN_ID_IDX ON LP_OAUTH_ACCESS_TOKEN (TOKEN_ID ASC);
CREATE INDEX OAUTH_AUTH_ID_IDX ON LP_OAUTH_ACCESS_TOKEN (AUTHENTICATION_ID ASC);
CREATE INDEX OAUTH_USER_NAME_IDX ON LP_OAUTH_ACCESS_TOKEN (USER_NAME ASC);


-- -----------------------------------------------------
-- Table `LP_OAUTH_ACCESS_TOKEN`
-- -----------------------------------------------------
CREATE TABLE LP_OAUTH_REFRESH_TOKEN (
  TOKEN_ID NVARCHAR(255) DEFAULT NULL,
  TOKEN VARBINARY(max),
  AUTHENTICATION VARBINARY(max)
) ;

CREATE INDEX OAUTH_REFRESH_ID_IDX ON LP_OAUTH_REFRESH_TOKEN (TOKEN_ID ASC);

-- -----------------------------------------------------
-- Table `LP_PERMISSION`
-- -----------------------------------------------------
CREATE TABLE LP_PERMISSION (
  [ID] NVARCHAR(45) NOT NULL,
  [CLIENT_ID] INT DEFAULT 0 NOT NULL,
  [DISPLAY_TEXT] NVARCHAR(100) NOT NULL,
  [PERMISSION_TYPE] INT NOT NULL DEFAULT 1,
  [GROUP_NAME] NVARCHAR(45) NULL,
  [DESCRIPTION] NVARCHAR(1000) NULL,
  [IS_SUPER] TINYINT NOT NULL DEFAULT 0,
  [IS_SYSTEM] TINYINT DEFAULT 0 NOT NULL,
  PRIMARY KEY ([ID]))
;


-- -----------------------------------------------------
-- Table `LP_ROLE`
-- -----------------------------------------------------
CREATE TABLE LP_ROLE (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [CLIENT_UNIT_ID] INT NULL DEFAULT NULL,
  [NAME] NVARCHAR(45) NOT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [FK_ROLES_CLIENT_UNITS1]
    FOREIGN KEY ([CLIENT_UNIT_ID])
    REFERENCES LP_CLIENT_UNIT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT [FK_ROLE_CLIENT1]
    FOREIGN KEY ([CLIENT_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_ROLES_CLIENT_UNITS1_IDX] ON LP_ROLE ([CLIENT_UNIT_ID] ASC);
CREATE INDEX [FK_ROLE_CLIENT1_IDX] ON LP_ROLE ([CLIENT_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_ROLE_DOCUMENT_FILTER`
-- -----------------------------------------------------
CREATE TABLE LP_ROLE_DOCUMENT_FILTER (
  [ROLE_ID] INT NOT NULL,
  [DOCUMENT_FILTER_ID] INT NOT NULL
 ,
  CONSTRAINT [FK_ROLE_DOCUMENT_FILTER_DOCUMENT_GROUP1]
    FOREIGN KEY ([DOCUMENT_FILTER_ID])
    REFERENCES LP_DOCUMENT_FILTER ([ID])
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT [FK_ROLE_DOCUMENT_FILTER_ROLE1]
    FOREIGN KEY ([ROLE_ID])
    REFERENCES LP_ROLE ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [FK_ROLE_DOCUMENT_GROUP_DOCUMENT_GROUP1_IDX] ON LP_ROLE_DOCUMENT_FILTER ([DOCUMENT_FILTER_ID] ASC);
CREATE INDEX [FK_ROLE_DOCUMENT_GROUP_ROLE1_IDX] ON LP_ROLE_DOCUMENT_FILTER ([ROLE_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_ROLE_PERMISSION`
-- -----------------------------------------------------
CREATE TABLE LP_ROLE_PERMISSION (
  [ROLE_ID] INT NOT NULL,
  [CLIENT_ID] INT DEFAULT 0 NOT NULL,
  [PERMISSION_ID] NVARCHAR(45) NOT NULL,
  [PERMISSION_LEVEL] INT NOT NULL
 ,
  CONSTRAINT [UNIQUE_ROLE_PERMISSION_COMBO] UNIQUE  ([ROLE_ID] ASC, [PERMISSION_ID] ASC),
  PRIMARY KEY ([ROLE_ID], [PERMISSION_ID]),
  CONSTRAINT [FK_ROLES_HAS_PERMISSIONS_PERMISSIONS1]
    FOREIGN KEY ([PERMISSION_ID])
    REFERENCES LP_PERMISSION ([ID])
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT [FK_ROLES_HAS_PERMISSIONS_ROLES1]
    FOREIGN KEY ([ROLE_ID])
    REFERENCES LP_ROLE ([ID])
    ON DELETE CASCADE
    ON UPDATE CASCADE)
;

CREATE INDEX [FK_ROLES_HAS_PERMISSIONS_PERMISSIONS1_IDX] ON LP_ROLE_PERMISSION ([PERMISSION_ID] ASC);
CREATE INDEX [FK_ROLES_HAS_PERMISSIONS_ROLES1_IDX] ON LP_ROLE_PERMISSION ([ROLE_ID] ASC);



-- -----------------------------------------------------
-- Table `LP_USER_DOCUMENT_FILTER`
-- -----------------------------------------------------
CREATE TABLE LP_USER_DOCUMENT_FILTER (
  [USER_ID] INT NOT NULL,
  [DOCUMENT_FILTER_ID] INT NOT NULL
 ,
  CONSTRAINT [FK_USER_DOCUMENT_FILTER_DOCUMENT_GROUP1]
    FOREIGN KEY ([DOCUMENT_FILTER_ID])
    REFERENCES LP_DOCUMENT_FILTER ([ID])
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT [FK_USER_DOCUMENT_FILTER_USER1]
    FOREIGN KEY ([USER_ID])
    REFERENCES LP_USER ([ID])
    ON DELETE CASCADE
    ON UPDATE CASCADE)
;

CREATE INDEX [FK_USER_DOCUMENT_GROUP_USER1_IDX] ON LP_USER_DOCUMENT_FILTER ([USER_ID] ASC);
CREATE INDEX [FK_USER_DOCUMENT_GROUP_DOCUMENT_GROUP1_IDX] ON LP_USER_DOCUMENT_FILTER ([DOCUMENT_FILTER_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_USER_PERMISSION`
-- -----------------------------------------------------
CREATE TABLE LP_USER_PERMISSION (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [CLIENT_UNIT_ID] INT NULL DEFAULT NULL,
  [USER_ID] INT NOT NULL,
  [PERMISSION_ID] NVARCHAR(45) NOT NULL,
  [PERMISSION_LEVEL] INT NOT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [FK_USER_PERMISSION_COMBO] UNIQUE  ([USER_ID] ASC, [PERMISSION_ID] ASC),
  CONSTRAINT [FK_USERS_HAS_PERMISSIONS_PERMISSIONS1]
    FOREIGN KEY ([PERMISSION_ID])
    REFERENCES LP_PERMISSION ([ID])
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT [FK_USERS_PERMISSIONS_CLIENT_UNITS1]
    FOREIGN KEY ([CLIENT_UNIT_ID])
    REFERENCES LP_CLIENT_UNIT ([ID])
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT [FK_USERS_PERMISSIONS_USERS1]
    FOREIGN KEY ([USER_ID])
    REFERENCES LP_USER ([ID])
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT [FK_USER_PERMISSION_CLIENT1]
    FOREIGN KEY ([CLIENT_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE CASCADE
    ON UPDATE CASCADE)
;

CREATE INDEX [FK_USERS_HAS_PERMISSIONS_PERMISSIONS1_IDX] ON LP_USER_PERMISSION ([PERMISSION_ID] ASC);
CREATE INDEX [FK_USERS_PERMISSIONS_USERS1_IDX] ON LP_USER_PERMISSION ([USER_ID] ASC);
CREATE INDEX [FK_USERS_PERMISSIONS_CLIENT_UNITS1_IDX] ON LP_USER_PERMISSION ([CLIENT_UNIT_ID] ASC);
CREATE INDEX [FK_USER_PERMISSION_CLIENT1_IDX] ON LP_USER_PERMISSION ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LP_USER_ROLE`
-- -----------------------------------------------------
CREATE TABLE LP_USER_ROLE (
  [USER_ID] INT NOT NULL,
  [ROLE_ID] INT NOT NULL,
  PRIMARY KEY ([USER_ID], [ROLE_ID])
 ,
  CONSTRAINT [FK_USERS_HAS_ROLES_ROLES1]
    FOREIGN KEY ([ROLE_ID])
    REFERENCES LP_ROLE ([ID])
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT [FK_USERS_HAS_ROLES_USERS1]
    FOREIGN KEY ([USER_ID])
    REFERENCES LP_USER ([ID])
    ON DELETE CASCADE
    ON UPDATE CASCADE)
;

CREATE INDEX [FK_USERS_HAS_ROLES_ROLES1_IDX] ON LP_USER_ROLE ([ROLE_ID] ASC);
CREATE INDEX [FK_USERS_HAS_ROLES_USERS1_IDX] ON LP_USER_ROLE ([USER_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_LP_USER_SEARCH`
-- -----------------------------------------------------
CREATE TABLE LP_USER_SEARCH (
  ID INT NOT NULL IDENTITY,
  CLIENT_ID INT NOT NULL,
  USER_ID INT NOT NULL,
  NAME NVARCHAR(45) NOT NULL,
  PATH NVARCHAR(45) NOT NULL,
  SEARCH NVARCHAR(1000) NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT FK_USER_SEARCH_CLIENT_ID FOREIGN KEY (CLIENT_ID) REFERENCES LP_CLIENT (ID) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_USER_SEARCH_USER_ID FOREIGN KEY (USER_ID) REFERENCES LP_USER (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
) ;


-- -----------------------------------------------------
-- Table `LP_LOG_ACTION`
-- -----------------------------------------------------
CREATE TABLE LP_LOG_ACTION (
  [ID] INT NOT NULL IDENTITY,
  [TIMESTAMP] DATETIME2(0) NOT NULL,
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [EDITOR_ID] INT NOT NULL,
  [EDITOR_NAME] NVARCHAR(100) NOT NULL,
  [ACTION] NVARCHAR(45) NOT NULL,
  [TABLE_NAME] NVARCHAR(45) NOT NULL,
  [PREVIOUS_VALUE] NVARCHAR(max) NULL DEFAULT NULL,
  [NEW_VALUE] NVARCHAR(max) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 )
;

CREATE INDEX [LOG_ACTION_IDX_TIMESTAMP] ON LP_LOG_ACTION ([TIMESTAMP] ASC);
CREATE INDEX [LOG_ACTION_IDX_CLIENT_ID] ON LP_LOG_ACTION ([CLIENT_ID] ASC);
CREATE INDEX [LOG_ACTION_IDX_EDITOR_ID] ON LP_LOG_ACTION ([EDITOR_ID] ASC);
CREATE INDEX [LOG_ACTION_IDX_TABLE_NAME] ON LP_LOG_ACTION ([TABLE_NAME] ASC);

-- -----------------------------------------------------
-- Table `LP_LOG_AUDIT`
-- -----------------------------------------------------

CREATE TABLE LP_LOG_AUDIT (
  [ID] BIGINT NOT NULL IDENTITY,
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [RECORD_ID] NVARCHAR(255) NOT NULL,
  [TIMESTAMP] DATETIME2(0) NOT NULL,
  [EDITOR_ID] INT NOT NULL,
  [EDITOR_NAME] NVARCHAR(100) NOT NULL,
  [ACTION] NVARCHAR(45) NOT NULL,
  [TABLE_NAME] NVARCHAR(45) NOT NULL,
  [DIFF] NVARCHAR(max) NULL DEFAULT NULL,
  PRIMARY KEY ([ID])
 )
;

CREATE INDEX [LOG_AUDIT_IDX_TIMESTAMP] ON LP_LOG_AUDIT ([TIMESTAMP] ASC);
CREATE INDEX [LOG_AUDIT_IDX_CLIENT_ID] ON LP_LOG_AUDIT ([CLIENT_ID] ASC);
CREATE INDEX [LOG_AUDIT_IDX_EDITOR_ID] ON LP_LOG_AUDIT ([EDITOR_ID] ASC);
CREATE INDEX [LOG_AUDIT_IDX_TABLE_NAME] ON LP_LOG_AUDIT ([TABLE_NAME] ASC);

-- -----------------------------------------------------
-- Table `LP_LOG_USER_AUTH`
-- -----------------------------------------------------
CREATE TABLE LP_LOG_USER_AUTH (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [USER_ID] INT NOT NULL,
  [EMAIL] NVARCHAR(100) NOT NULL,
  [TIMESTAMP] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  PRIMARY KEY ([ID])
 )
;

CREATE INDEX [LOG_USER_AUTH_IDX_CLIENT_ID] ON LP_LOG_USER_AUTH ([CLIENT_ID] ASC);
CREATE INDEX [LOG_USER_AUTH_TIMESTAMP] ON LP_LOG_USER_AUTH ([TIMESTAMP] ASC);
CREATE INDEX [LOG_USER_AUTH_USER_IDX] ON LP_LOG_USER_AUTH ([USER_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_LOG_REQUEST`
-- -----------------------------------------------------
CREATE TABLE LP_LOG_REQUEST (
  [ID] INT NOT NULL IDENTITY,
  [START_TIMESTAMP] DATETIME2(0) NOT NULL DEFAULT GETDATE(),
  [API_KEY] NVARCHAR(45) NULL,
  [CLIENT_ID] INT NULL DEFAULT NULL,
  [USER_ID] INT NULL,
  [LOCAL_HOSTNAME] NVARCHAR(255) DEFAULT NULL,
  [REMOTE_HOST] NVARCHAR(255) DEFAULT NULL,
  [REMOTE_IP] NVARCHAR(45) DEFAULT NULL,
  [REQUEST] NVARCHAR(1000) NOT NULL,
  [REQUEST_METHOD] NVARCHAR(45) NULL,
  [DURATION] FLOAT NOT NULL,
  [ERROR] NVARCHAR(1000) NULL,
  PRIMARY KEY ([ID])
 )
;

CREATE INDEX [LOG_ACTION_IDX_TIMESTAMP] ON LP_LOG_REQUEST ([START_TIMESTAMP] ASC);
CREATE INDEX [LOG_ACTION_IDX_CLIENT_ID] ON LP_LOG_REQUEST ([CLIENT_ID] ASC);
CREATE INDEX [LOG_ACTION_IDX_EDITOR_ID] ON LP_LOG_REQUEST ([USER_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_DASHBOARD_CHART`
-- -----------------------------------------------------
CREATE TABLE LP_DASHBOARD_CHART (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [USER_ID] INT NOT NULL,
  [CHART_ORDER] INT NOT NULL,
  [CHART_SIZE] INT NOT NULL,
  [DETAILS] NVARCHAR(1000) NOT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [fk_DASHBOARD_CHART_USER1]
    FOREIGN KEY ([USER_ID])
    REFERENCES LP_USER ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT [fk_DASHBOARD_CHART_CLIENT1]
    FOREIGN KEY ([CLIENT_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [fk_DASHBOARD_CHART_USER1_idx] ON LP_DASHBOARD_CHART ([USER_ID] ASC);
CREATE INDEX [fk_DASHBOARD_CHART_CLIENT1_idx] ON LP_DASHBOARD_CHART ([CLIENT_ID] ASC);


-- -----------------------------------------------------
-- Table `LP_USER_PREF_SEARCH`
-- -----------------------------------------------------
CREATE TABLE LP_USER_PREF_SEARCH (
  [ID] INT NOT NULL IDENTITY,
  [USER_ID] INT NOT NULL,
  [DATA_TYPE] NVARCHAR(45) NOT NULL,
  [DATA_KEY] NVARCHAR(100) NOT NULL,
  [SEARCH_LEVEL] INT NOT NULL DEFAULT 1,
  [DISPLAY_ORDER] INT NOT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [fk_USER_DOCUMENT_PREF_USER1]
    FOREIGN KEY ([USER_ID])
    REFERENCES LP_USER ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [fk_USER_SEARCH_PREF_USER1_idx] ON LP_USER_PREF_SEARCH ([USER_ID] ASC);
CREATE INDEX [fk_USER_SEARCH_PREF_DATA_TYPE] ON LP_USER_PREF_SEARCH ([DATA_TYPE] ASC);


-- -----------------------------------------------------
-- Table `LP_USER_PREF_DISPLAY`
-- -----------------------------------------------------
CREATE TABLE LP_USER_PREF_DISPLAY (
  [ID] INT NOT NULL IDENTITY,
  [USER_ID] INT NOT NULL,
  [DISPLAY_ORDER] INT NOT NULL,
  [DATA_TYPE] NVARCHAR(45) NOT NULL,
  [DATA_KEY] NVARCHAR(100) NOT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [fk_USER_DOCUMENT_PREF_USER10]
    FOREIGN KEY ([USER_ID])
    REFERENCES LP_USER ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [fk_USER_DISPLAY_PREF_USER1_idx] ON LP_USER_PREF_DISPLAY ([USER_ID] ASC);
CREATE INDEX [fk_USER_DISPLAY_PREF_DATA_TYPE] ON LP_USER_PREF_DISPLAY ([DATA_TYPE] ASC);


-- -----------------------------------------------------
-- Table `LP_BP_PREFIX`
-- -----------------------------------------------------
CREATE TABLE LP_BP_PREFIX (
  [ID] INT NOT NULL IDENTITY,
  [CLIENT_ID] INT NOT NULL,
  [PREFIX] NVARCHAR(45) NOT NULL,
  PRIMARY KEY ([ID])
 ,
  CONSTRAINT [fk_BP_PREFIX_CLIENT1]
    FOREIGN KEY ([CLIENT_ID])
    REFERENCES LP_CLIENT ([ID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX [fk_BP_PREFIX_CLIENT1_idx] ON LP_BP_PREFIX ([CLIENT_ID] ASC);

-- -----------------------------------------------------
-- Table `LP_EXTERNAL_LINK`
-- -----------------------------------------------------

CREATE TABLE LP_EXTERNAL_LINK (
  ID INT NOT NULL IDENTITY,
  CLIENT_ID INT NOT NULL,
  TITLE NVARCHAR(45) NOT NULL,
  URL NVARCHAR(500) NOT NULL,
  PERMISSION_ID NVARCHAR(45) DEFAULT NULL,
  FRAMED TINYINT DEFAULT 0 NOT NULL ,
  PASS_AUTH TINYINT DEFAULT 0 NOT NULL ,
  LINK_GROUP NVARCHAR(45) NULL,
  PRIMARY KEY (ID),
  CONSTRAINT FK_EXTERNAL_LINK_CLIENT_ID FOREIGN KEY (CLIENT_ID) REFERENCES LP_CLIENT (ID),
  CONSTRAINT FK_EXTERNAL_LINK_PERMISSION_ID FOREIGN KEY (PERMISSION_ID) REFERENCES LP_PERMISSION (ID)
) ;


-- -----------------------------------------------------
-- Table `LP_CODE_LIST_FILTER`
-- -----------------------------------------------------

CREATE TABLE LP_CODE_LIST_FILTER (
  ID INT NOT NULL IDENTITY,
  CLIENT_ID INT NOT NULL,
  NAME NVARCHAR(45) NOT NULL,
  SYSTEM_TYPE NVARCHAR(10) NOT NULL DEFAULT 'B2Bi',
  PRIMARY KEY (ID),
  CONSTRAINT FK_CODE_LIST_FILTER_CLIENT_ID
    FOREIGN KEY (CLIENT_ID)
    REFERENCES LP_CLIENT (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

CREATE UNIQUE INDEX IDX_CODE_LIST_NAME_UNIQUE ON LP_CODE_LIST_FILTER (CLIENT_ID, NAME);

-- -----------------------------------------------------
-- Table `LP_CODE_LIST_FILTER_CODE`
-- -----------------------------------------------------

CREATE TABLE LP_CODE_LIST_FILTER_CODE (
  CODE_LIST_FILTER_ID INT NOT NULL,
  LIST_NAME NVARCHAR(255) NOT NULL,
  MATCH_MODE NVARCHAR(15) NOT NULL DEFAULT 'Exact',
  IS_CASE_SENSITIVE SMALLINT NOT NULL DEFAULT '0',
  PRIMARY KEY (CODE_LIST_FILTER_ID,LIST_NAME),
  CONSTRAINT FK_CODE_LIST_CODE_FILTER_ID
    FOREIGN KEY (CODE_LIST_FILTER_ID)
    REFERENCES LP_CODE_LIST_FILTER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table `LP_ROLE_CODE_LIST_FILTER`
-- -----------------------------------------------------

CREATE TABLE LP_ROLE_CODE_LIST_FILTER (
  ROLE_ID INT NOT NULL,
  CODE_LIST_FILTER_ID INT NOT NULL,
  PRIMARY KEY (ROLE_ID,CODE_LIST_FILTER_ID),
  CONSTRAINT FK_ROLE_CODE_FILTER_LIST_ID
    FOREIGN KEY (CODE_LIST_FILTER_ID)
    REFERENCES LP_CODE_LIST_FILTER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT FK_ROLE_CODE_FILTER_ROLE_ID
    FOREIGN KEY (ROLE_ID)
    REFERENCES LP_ROLE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table `LP_USER_CODE_LIST_FILTER`
-- -----------------------------------------------------

CREATE TABLE LP_USER_CODE_LIST_FILTER (
  USER_ID INT NOT NULL,
  CODE_LIST_FILTER_ID INT NOT NULL,
  PRIMARY KEY (USER_ID, CODE_LIST_FILTER_ID),
  CONSTRAINT FK_USER_CODE_FILTER_LIST_ID
    FOREIGN KEY (CODE_LIST_FILTER_ID)
    REFERENCES LP_CODE_LIST_FILTER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT FK_USER_CODE_FILTER_USER_ID
    FOREIGN KEY (USER_ID)
    REFERENCES LP_USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


CREATE TABLE LP_SESSION (
	PRIMARY_ID CHAR(36) NOT NULL,
	SESSION_ID CHAR(36) NOT NULL,
	CREATION_TIME BIGINT NOT NULL,
	LAST_ACCESS_TIME BIGINT NOT NULL,
	MAX_INACTIVE_INTERVAL INT NOT NULL,
	EXPIRY_TIME BIGINT NOT NULL,
	PRINCIPAL_NAME VARCHAR(100),
	CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (PRIMARY_ID)
);

CREATE UNIQUE INDEX SPRING_SESSION_IX1 ON LP_SESSION (SESSION_ID);
CREATE INDEX SPRING_SESSION_IX2 ON LP_SESSION (EXPIRY_TIME);
CREATE INDEX SPRING_SESSION_IX3 ON LP_SESSION (PRINCIPAL_NAME);

CREATE TABLE LP_SESSION_ATTRIBUTES (
	SESSION_PRIMARY_ID CHAR(36) NOT NULL,
	ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
	ATTRIBUTE_BYTES IMAGE NOT NULL,
	CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
	CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES LP_SESSION(PRIMARY_ID) ON DELETE CASCADE
);


-- -----------------------------------------------------
-- View `VIEW_PERMISSIONS`
-- -----------------------------------------------------
GO
CREATE VIEW LP_VIEW_PERMISSIONS AS
    SELECT
        UR.USER_ID AS USER_ID,
        R.CLIENT_ID AS CLIENT_ID,
        R.CLIENT_UNIT_ID AS CLIENT_UNIT_ID,
        RP.PERMISSION_ID AS PERMISSION_ID,
        P.PERMISSION_TYPE AS PERMISSION_TYPE,
        RP.PERMISSION_LEVEL AS PERMISSION_LEVEL
    FROM
        ((LP_USER_ROLE UR
        LEFT JOIN LP_ROLE R ON ((UR.ROLE_ID = R.ID)))
        LEFT JOIN LP_ROLE_PERMISSION RP ON ((RP.ROLE_ID = R.ID)))
        LEFT JOIN LP_PERMISSION P ON ((RP.PERMISSION_ID = P.ID))
    WHERE
        (RP.PERMISSION_ID IS NOT NULL)
    UNION SELECT
        UP.USER_ID AS USER_ID,
        UP.CLIENT_ID AS CLIENT_ID,
        UP.CLIENT_UNIT_ID AS CLIENT_UNIT_ID,
        UP.PERMISSION_ID AS PERMISSION_ID,
        P.PERMISSION_TYPE AS PERMISSION_TYPE,
        UP.PERMISSION_LEVEL AS PERMISSION_LEVEL
    FROM
        LP_USER_PERMISSION UP
    LEFT JOIN LP_PERMISSION P ON ((UP.PERMISSION_ID = P.ID))
    ;

GO
-- -----------------------------------------------------
-- View `VIEW_COMBINED_PERMISSION`
-- -----------------------------------------------------

    CREATE VIEW LP_VIEW_COMBINED_PERMISSIONS AS
    SELECT
    	CLIENT_ID,
        USER_ID,
        CLIENT_UNIT_ID,
        PERMISSION_ID,
        PERMISSION_TYPE,
        MAX(PERMISSION_LEVEL) as PERMISSION_LEVEL
    FROM LP_VIEW_PERMISSIONS
    GROUP BY
    	CLIENT_ID,
        USER_ID,
        CLIENT_UNIT_ID,
        PERMISSION_ID,
        PERMISSION_TYPE
    ;

-- -----------------------------------------------------
-- View `VIEW_DOCUMENT_PERMISSION`
-- -----------------------------------------------------
GO
CREATE VIEW LP_VIEW_DOCUMENT_PERMISSION AS SELECT
        UR.USER_ID AS USER_ID,
        R.CLIENT_ID AS CLIENT_ID,
        DF.ID AS DOCUMENT_FILTER_ID,
        DF.CONJUNCTION AS CONJUNCTION,
        DFT.DOCUMENT_TYPE AS DOCUMENT_TYPE,
        DFS.SOURCE_ID AS SOURCE_ID,
        DFD.DESTINATION_ID AS DESTINATION_ID
    FROM
        ((((((LP_USER_ROLE UR
        LEFT JOIN LP_ROLE R ON ((UR.ROLE_ID = R.ID)))
        LEFT JOIN LP_ROLE_DOCUMENT_FILTER RDF ON ((R.ID = RDF.ROLE_ID)))
        LEFT JOIN LP_DOCUMENT_FILTER DF ON ((RDF.DOCUMENT_FILTER_ID = DF.ID)))
        LEFT JOIN LP_DOCUMENT_FILTER_TYPE DFT ON ((DF.ID = DFT.DOCUMENT_FILTER_ID)))
        LEFT JOIN LP_DOCUMENT_FILTER_SOURCE DFS ON ((DF.ID = DFS.DOCUMENT_FILTER_ID)))
        LEFT JOIN LP_DOCUMENT_FILTER_DESTINATION DFD ON ((DF.ID = DFD.DOCUMENT_FILTER_ID)))
    WHERE
        (DF.ID IS NOT NULL)
    UNION SELECT
        UDF.USER_ID AS USER_ID,
        DF.CLIENT_ID AS CLIENT_ID,
        DF.ID AS ID,
        DF.CONJUNCTION AS CONJUNCTION,
        DFT.DOCUMENT_TYPE AS DOCUMENT_TYPE,
        DFS.SOURCE_ID AS SOURCE_ID,
        DFD.DESTINATION_ID AS DESTINATION_ID
    FROM
        ((((LP_USER_DOCUMENT_FILTER UDF
        LEFT JOIN LP_DOCUMENT_FILTER DF ON ((UDF.DOCUMENT_FILTER_ID = DF.ID)))
        LEFT JOIN LP_DOCUMENT_FILTER_TYPE DFT ON ((DF.ID = DFT.DOCUMENT_FILTER_ID)))
        LEFT JOIN LP_DOCUMENT_FILTER_SOURCE DFS ON ((DF.ID = DFS.DOCUMENT_FILTER_ID)))
        LEFT JOIN LP_DOCUMENT_FILTER_DESTINATION DFD ON ((DF.ID = DFD.DOCUMENT_FILTER_ID)))
    WHERE
        (DF.ID IS NOT NULL);

GO


-- -----------------------------------------------------
-- View `VIEW_CODE_LIST_PERMISSION`
-- -----------------------------------------------------

CREATE VIEW LP_VIEW_CODE_LIST_PERMISSION AS
SELECT
	R.CLIENT_ID,
	UR.USER_ID,
	RCLF.CODE_LIST_FILTER_ID,
	CLF.SYSTEM_TYPE,
	CLFC.LIST_NAME,
	CLFC.MATCH_MODE,
	CLFC.IS_CASE_SENSITIVE
FROM LP_USER_ROLE UR
LEFT JOIN LP_ROLE R ON
	UR.ROLE_ID = R.ID
LEFT JOIN LP_ROLE_CODE_LIST_FILTER RCLF ON
	UR.ROLE_ID = RCLF.ROLE_ID
LEFT JOIN LP_CODE_LIST_FILTER CLF ON
	RCLF.CODE_LIST_FILTER_ID = CLF.ID
LEFT JOIN LP_CODE_LIST_FILTER_CODE CLFC ON
	CLF.ID = CLFC.CODE_LIST_FILTER_ID
WHERE CLF.ID IS NOT NULL
UNION
SELECT
	U.CLIENT_ID,
	U.ID,
	UCLF.CODE_LIST_FILTER_ID,
	CLF.SYSTEM_TYPE,
	CLFC.LIST_NAME,
	CLFC.MATCH_MODE,
	CLFC.IS_CASE_SENSITIVE
FROM LP_USER U
LEFT JOIN LP_USER_CODE_LIST_FILTER UCLF ON
	U.ID = UCLF.USER_ID
LEFT JOIN LP_CODE_LIST_FILTER CLF ON
	UCLF.CODE_LIST_FILTER_ID = CLF.ID
LEFT JOIN LP_CODE_LIST_FILTER_CODE CLFC ON
	CLF.ID = CLFC.CODE_LIST_FILTER_ID
WHERE CLF.ID IS NOT NULL
;

GO


-- -----------------------------------------------------
-- FILE GATEWAY TABLES
-- -----------------------------------------------------
CREATE TABLE LP_FG_FILE_FILTER (
  ID INT NOT NULL IDENTITY,
  CLIENT_ID INT NOT NULL,
  NAME NVARCHAR(45) NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT FK_FG_FILE_FILTER_CLIENT FOREIGN KEY (CLIENT_ID) REFERENCES LP_CLIENT (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE INDEX FK_FG_FILE_FILTER_CLIENT_idx ON LP_FG_FILE_FILTER (CLIENT_ID ASC);

CREATE TABLE LP_FG_FILE_FILTER_FILENAME (
  FG_FILE_FILTER_ID INT NOT NULL,
  FILENAME NVARCHAR(255) NOT NULL,
  MATCH_MODE NVARCHAR(10) NOT NULL DEFAULT 'EXACT',
  PRIMARY KEY (FG_FILE_FILTER_ID,FILENAME),
  CONSTRAINT FK_FILTER_FILENAME_FILTER_ID FOREIGN KEY (FG_FILE_FILTER_ID) REFERENCES LP_FG_FILE_FILTER (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE LP_FG_FILE_FILTER_PRODUCER (
  FG_FILE_FILTER_ID INT NOT NULL,
  PRODUCER_ID NVARCHAR(45) NOT NULL,
  PRIMARY KEY (FG_FILE_FILTER_ID,PRODUCER_ID),
  CONSTRAINT FK_FILTER_PRODUCER_FILTER_ID FOREIGN KEY (FG_FILE_FILTER_ID) REFERENCES LP_FG_FILE_FILTER (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
);


CREATE TABLE LP_USER_FG_FILE_FILTER (
  USER_ID INT NOT NULL,
  FG_FILE_FILTER_ID INT NOT NULL,
  PRIMARY KEY (USER_ID,FG_FILE_FILTER_ID),
  CONSTRAINT FG_USER_FILE_FILTER_FIL_ID FOREIGN KEY (FG_FILE_FILTER_ID) REFERENCES LP_FG_FILE_FILTER (ID) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FG_USER_FILE_FILTER_USER_ID FOREIGN KEY (USER_ID) REFERENCES LP_USER (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE INDEX FG_USER_FILE_FILTER_FIL_ID_idx ON LP_USER_FG_FILE_FILTER (FG_FILE_FILTER_ID ASC);

CREATE TABLE LP_ROLE_FG_FILE_FILTER (
  ROLE_ID INT NOT NULL,
  FG_FILE_FILTER_ID INT NOT NULL,
  PRIMARY KEY (ROLE_ID,FG_FILE_FILTER_ID),
  CONSTRAINT FK_ROLE_FILE_FILTER_FILT_ID FOREIGN KEY (FG_FILE_FILTER_ID) REFERENCES LP_FG_FILE_FILTER (ID) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_ROLE_FILE_FILTER_ROLE_ID FOREIGN KEY (ROLE_ID) REFERENCES LP_ROLE (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE INDEX FK_ROLE_FILE_FILTER_FILT_ID_idx ON LP_ROLE_FG_FILE_FILTER (FG_FILE_FILTER_ID ASC);

GO